File {
    shebang: None,
    attrs: [
        Attribute {
            pound_token: Pound,
            style: AttrStyle::Inner(
                Not,
            ),
            bracket_token: Bracket,
            meta: Meta::List {
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: allow,
                                span: bytes(4..9),
                            },
                            arguments: PathArguments::None,
                        },
                    ],
                },
                delimiter: MacroDelimiter::Paren(
                    Paren,
                ),
                tokens: TokenStream [
                    Ident {
                        sym: incomplete_features,
                        span: bytes(10..29),
                    },
                ],
            },
        },
        Attribute {
            pound_token: Pound,
            style: AttrStyle::Inner(
                Not,
            ),
            bracket_token: Bracket,
            meta: Meta::List {
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: cfg_attr,
                                span: bytes(35..43),
                            },
                            arguments: PathArguments::None,
                        },
                    ],
                },
                delimiter: MacroDelimiter::Paren(
                    Paren,
                ),
                tokens: TokenStream [
                    Ident {
                        sym: feature,
                        span: bytes(44..51),
                    },
                    Punct {
                        char: '=',
                        spacing: Alone,
                        span: bytes(52..53),
                    },
                    Literal {
                        lit: "no_std",
                        span: bytes(54..62),
                    },
                    Punct {
                        char: ',',
                        spacing: Alone,
                        span: bytes(62..63),
                    },
                    Ident {
                        sym: no_std,
                        span: bytes(64..70),
                    },
                ],
            },
        },
        Attribute {
            pound_token: Pound,
            style: AttrStyle::Inner(
                Not,
            ),
            bracket_token: Bracket,
            meta: Meta::List {
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: cfg_attr,
                                span: bytes(76..84),
                            },
                            arguments: PathArguments::None,
                        },
                    ],
                },
                delimiter: MacroDelimiter::Paren(
                    Paren,
                ),
                tokens: TokenStream [
                    Ident {
                        sym: feature,
                        span: bytes(85..92),
                    },
                    Punct {
                        char: '=',
                        spacing: Alone,
                        span: bytes(93..94),
                    },
                    Literal {
                        lit: "ptr_metadata",
                        span: bytes(95..109),
                    },
                    Punct {
                        char: ',',
                        spacing: Alone,
                        span: bytes(109..110),
                    },
                    Ident {
                        sym: feature,
                        span: bytes(111..118),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [
                            Ident {
                                sym: ptr_metadata,
                                span: bytes(119..131),
                            },
                            Punct {
                                char: ',',
                                spacing: Alone,
                                span: bytes(131..132),
                            },
                            Ident {
                                sym: unsize,
                                span: bytes(133..139),
                            },
                        ],
                        span: bytes(118..140),
                    },
                ],
            },
        },
        Attribute {
            pound_token: Pound,
            style: AttrStyle::Inner(
                Not,
            ),
            bracket_token: Bracket,
            meta: Meta::List {
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: cfg_attr,
                                span: bytes(146..154),
                            },
                            arguments: PathArguments::None,
                        },
                    ],
                },
                delimiter: MacroDelimiter::Paren(
                    Paren,
                ),
                tokens: TokenStream [
                    Ident {
                        sym: feature,
                        span: bytes(155..162),
                    },
                    Punct {
                        char: '=',
                        spacing: Alone,
                        span: bytes(163..164),
                    },
                    Literal {
                        lit: "error_in_core",
                        span: bytes(165..180),
                    },
                    Punct {
                        char: ',',
                        spacing: Alone,
                        span: bytes(180..181),
                    },
                    Ident {
                        sym: feature,
                        span: bytes(182..189),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [
                            Ident {
                                sym: error_in_core,
                                span: bytes(190..203),
                            },
                        ],
                        span: bytes(189..204),
                    },
                ],
            },
        },
        Attribute {
            pound_token: Pound,
            style: AttrStyle::Inner(
                Not,
            ),
            bracket_token: Bracket,
            meta: Meta::List {
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: cfg_attr,
                                span: bytes(210..218),
                            },
                            arguments: PathArguments::None,
                        },
                    ],
                },
                delimiter: MacroDelimiter::Paren(
                    Paren,
                ),
                tokens: TokenStream [
                    Ident {
                        sym: feature,
                        span: bytes(219..226),
                    },
                    Punct {
                        char: '=',
                        spacing: Alone,
                        span: bytes(227..228),
                    },
                    Literal {
                        lit: "allocator_api",
                        span: bytes(229..244),
                    },
                    Punct {
                        char: ',',
                        spacing: Alone,
                        span: bytes(244..245),
                    },
                    Ident {
                        sym: feature,
                        span: bytes(246..253),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [
                            Ident {
                                sym: allocator_api,
                                span: bytes(254..267),
                            },
                        ],
                        span: bytes(253..268),
                    },
                ],
            },
        },
        Attribute {
            pound_token: Pound,
            style: AttrStyle::Inner(
                Not,
            ),
            bracket_token: Bracket,
            meta: Meta::List {
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: cfg_attr,
                                span: bytes(274..282),
                            },
                            arguments: PathArguments::None,
                        },
                    ],
                },
                delimiter: MacroDelimiter::Paren(
                    Paren,
                ),
                tokens: TokenStream [
                    Ident {
                        sym: doc,
                        span: bytes(283..286),
                    },
                    Punct {
                        char: ',',
                        spacing: Alone,
                        span: bytes(286..287),
                    },
                    Ident {
                        sym: feature,
                        span: bytes(288..295),
                    },
                    Group {
                        delimiter: Parenthesis,
                        stream: TokenStream [
                            Ident {
                                sym: doc_auto_cfg,
                                span: bytes(296..308),
                            },
                        ],
                        span: bytes(295..309),
                    },
                ],
            },
        },
        Attribute {
            pound_token: Pound,
            style: AttrStyle::Inner(
                Not,
            ),
            bracket_token: Bracket,
            meta: Meta::List {
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: warn,
                                span: bytes(315..319),
                            },
                            arguments: PathArguments::None,
                        },
                    ],
                },
                delimiter: MacroDelimiter::Paren(
                    Paren,
                ),
                tokens: TokenStream [
                    Ident {
                        sym: missing_docs,
                        span: bytes(320..332),
                    },
                ],
            },
        },
        Attribute {
            pound_token: Pound,
            style: AttrStyle::Inner(
                Not,
            ),
            bracket_token: Bracket,
            meta: Meta::NameValue {
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: doc,
                                span: bytes(338..341),
                            },
                            arguments: PathArguments::None,
                        },
                    ],
                },
                eq_token: Eq,
                value: Expr::Macro {
                    attrs: [],
                    mac: Macro {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: include_str,
                                        span: bytes(344..355),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        bang_token: Not,
                        delimiter: MacroDelimiter::Paren(
                            Paren,
                        ),
                        tokens: TokenStream [
                            Literal {
                                lit: "../doc/crate.md",
                                span: bytes(357..374),
                            },
                        ],
                    },
                },
            },
        },
    ],
    items: [
        Item::ExternCrate {
            attrs: [
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::List {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: cfg,
                                        span: bytes(380..383),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        delimiter: MacroDelimiter::Paren(
                            Paren,
                        ),
                        tokens: TokenStream [
                            Ident {
                                sym: feature,
                                span: bytes(384..391),
                            },
                            Punct {
                                char: '=',
                                spacing: Alone,
                                span: bytes(392..393),
                            },
                            Literal {
                                lit: "no_std",
                                span: bytes(394..402),
                            },
                        ],
                    },
                },
            ],
            vis: Visibility::Inherited,
            extern_token: Extern,
            crate_token: Crate,
            ident: Ident {
                sym: alloc,
                span: bytes(418..423),
            },
            rename: None,
            semi_token: Semi,
        },
        Item::Mod {
            attrs: [],
            vis: Visibility::Inherited,
            unsafety: None,
            mod_token: Mod,
            ident: Ident {
                sym: common,
                span: bytes(430..436),
            },
            content: None,
            semi: Some(
                Semi,
            ),
        },
        Item::Mod {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            unsafety: None,
            mod_token: Mod,
            ident: Ident {
                sym: error,
                span: bytes(446..451),
            },
            content: None,
            semi: Some(
                Semi,
            ),
        },
        Item::Mod {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            unsafety: None,
            mod_token: Mod,
            ident: Ident {
                sym: memory,
                span: bytes(461..467),
            },
            content: None,
            semi: Some(
                Semi,
            ),
        },
        Item::Mod {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            unsafety: None,
            mod_token: Mod,
            ident: Ident {
                sym: range,
                span: bytes(477..482),
            },
            content: None,
            semi: Some(
                Semi,
            ),
        },
        Item::Mod {
            attrs: [],
            vis: Visibility::Inherited,
            unsafety: None,
            mod_token: Mod,
            ident: Ident {
                sym: raw,
                span: bytes(488..491),
            },
            content: None,
            semi: Some(
                Semi,
            ),
        },
        Item::Mod {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            unsafety: None,
            mod_token: Mod,
            ident: Ident {
                sym: reference,
                span: bytes(501..510),
            },
            content: None,
            semi: Some(
                Semi,
            ),
        },
        Item::Mod {
            attrs: [],
            vis: Visibility::Inherited,
            unsafety: None,
            mod_token: Mod,
            ident: Ident {
                sym: types,
                span: bytes(516..521),
            },
            content: None,
            semi: Some(
                Semi,
            ),
        },
        Item::Use {
            attrs: [
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::List {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: cfg,
                                        span: bytes(540..543),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        delimiter: MacroDelimiter::Paren(
                            Paren,
                        ),
                        tokens: TokenStream [
                            Ident {
                                sym: feature,
                                span: bytes(544..551),
                            },
                            Punct {
                                char: '=',
                                spacing: Alone,
                                span: bytes(552..553),
                            },
                            Literal {
                                lit: "ptr_metadata",
                                span: bytes(554..568),
                            },
                        ],
                    },
                },
            ],
            vis: Visibility::Public(
                Pub,
            ),
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: common,
                        span: bytes(579..585),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Name(
                        UseName {
                            ident: Ident {
                                sym: static_metadata,
                                span: bytes(587..602),
                            },
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: error,
                        span: bytes(612..617),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Glob(
                        UseGlob {
                            star_token: Star,
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: reference,
                        span: bytes(630..639),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Group(
                        UseGroup {
                            brace_token: Brace,
                            items: [
                                UseTree::Name(
                                    UseName {
                                        ident: Ident {
                                            sym: CERef,
                                            span: bytes(642..647),
                                        },
                                    },
                                ),
                                Comma,
                                UseTree::Name(
                                    UseName {
                                        ident: Ident {
                                            sym: ContiguousEntryRef,
                                            span: bytes(649..667),
                                        },
                                    },
                                ),
                            ],
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::List {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: cfg,
                                        span: bytes(672..675),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        delimiter: MacroDelimiter::Paren(
                            Paren,
                        ),
                        tokens: TokenStream [
                            Ident {
                                sym: feature,
                                span: bytes(676..683),
                            },
                            Punct {
                                char: '=',
                                spacing: Alone,
                                span: bytes(684..685),
                            },
                            Literal {
                                lit: "sync_impl",
                                span: bytes(686..697),
                            },
                        ],
                    },
                },
            ],
            vis: Visibility::Public(
                Pub,
            ),
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: reference,
                        span: bytes(708..717),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Group(
                        UseGroup {
                            brace_token: Brace,
                            items: [
                                UseTree::Name(
                                    UseName {
                                        ident: Ident {
                                            sym: SCERef,
                                            span: bytes(720..726),
                                        },
                                    },
                                ),
                                Comma,
                                UseTree::Name(
                                    UseName {
                                        ident: Ident {
                                            sym: SyncContiguousEntryRef,
                                            span: bytes(728..750),
                                        },
                                    },
                                ),
                            ],
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: core,
                        span: bytes(758..762),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Path(
                        UsePath {
                            ident: Ident {
                                sym: cell,
                                span: bytes(764..768),
                            },
                            colon2_token: PathSep,
                            tree: UseTree::Name(
                                UseName {
                                    ident: Ident {
                                        sym: Cell,
                                        span: bytes(770..774),
                                    },
                                },
                            ),
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: core,
                        span: bytes(780..784),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Path(
                        UsePath {
                            ident: Ident {
                                sym: marker,
                                span: bytes(786..792),
                            },
                            colon2_token: PathSep,
                            tree: UseTree::Name(
                                UseName {
                                    ident: Ident {
                                        sym: PhantomData,
                                        span: bytes(794..805),
                                    },
                                },
                            ),
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: core,
                        span: bytes(811..815),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Path(
                        UsePath {
                            ident: Ident {
                                sym: mem,
                                span: bytes(817..820),
                            },
                            colon2_token: PathSep,
                            tree: UseTree::Name(
                                UseName {
                                    ident: Ident {
                                        sym: align_of,
                                        span: bytes(822..830),
                                    },
                                },
                            ),
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: core,
                        span: bytes(836..840),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Group(
                        UseGroup {
                            brace_token: Brace,
                            items: [
                                UseTree::Path(
                                    UsePath {
                                        ident: Ident {
                                            sym: alloc,
                                            span: bytes(848..853),
                                        },
                                        colon2_token: PathSep,
                                        tree: UseTree::Name(
                                            UseName {
                                                ident: Ident {
                                                    sym: Layout,
                                                    span: bytes(855..861),
                                                },
                                            },
                                        ),
                                    },
                                ),
                                Comma,
                                UseTree::Path(
                                    UsePath {
                                        ident: Ident {
                                            sym: mem,
                                            span: bytes(867..870),
                                        },
                                        colon2_token: PathSep,
                                        tree: UseTree::Group(
                                            UseGroup {
                                                brace_token: Brace,
                                                items: [
                                                    UseTree::Name(
                                                        UseName {
                                                            ident: Ident {
                                                                sym: size_of,
                                                                span: bytes(873..880),
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    UseTree::Name(
                                                        UseName {
                                                            ident: Ident {
                                                                sym: ManuallyDrop,
                                                                span: bytes(882..894),
                                                            },
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                Comma,
                            ],
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: common,
                        span: bytes(905..911),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Glob(
                        UseGlob {
                            star_token: Star,
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: memory,
                        span: bytes(920..926),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Group(
                        UseGroup {
                            brace_token: Brace,
                            items: [
                                UseTree::Name(
                                    UseName {
                                        ident: Ident {
                                            sym: DefaultMemoryManager,
                                            span: bytes(929..949),
                                        },
                                    },
                                ),
                                Comma,
                                UseTree::Name(
                                    UseName {
                                        ident: Ident {
                                            sym: ManageMemory,
                                            span: bytes(951..963),
                                        },
                                    },
                                ),
                            ],
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: range,
                        span: bytes(970..975),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Name(
                        UseName {
                            ident: Ident {
                                sym: ByteRange,
                                span: bytes(977..986),
                            },
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: raw,
                        span: bytes(992..995),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Glob(
                        UseGlob {
                            star_token: Star,
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: reference,
                        span: bytes(1004..1013),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Path(
                        UsePath {
                            ident: Ident {
                                sym: state,
                                span: bytes(1015..1020),
                            },
                            colon2_token: PathSep,
                            tree: UseTree::Group(
                                UseGroup {
                                    brace_token: Brace,
                                    items: [
                                        UseTree::Name(
                                            UseName {
                                                ident: Ident {
                                                    sym: BorrowState,
                                                    span: bytes(1023..1034),
                                                },
                                            },
                                        ),
                                        Comma,
                                        UseTree::Name(
                                            UseName {
                                                ident: Ident {
                                                    sym: ReferenceState,
                                                    span: bytes(1036..1050),
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: reference,
                        span: bytes(1057..1066),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Name(
                        UseName {
                            ident: Ident {
                                sym: EntryRef,
                                span: bytes(1068..1076),
                            },
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Use {
            attrs: [],
            vis: Visibility::Inherited,
            use_token: Use,
            leading_colon: None,
            tree: UseTree::Path(
                UsePath {
                    ident: Ident {
                        sym: types,
                        span: bytes(1082..1087),
                    },
                    colon2_token: PathSep,
                    tree: UseTree::Glob(
                        UseGlob {
                            star_token: Star,
                        },
                    ),
                },
            ),
            semi_token: Semi,
        },
        Item::Struct {
            attrs: [
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1093..1172),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: " A memory container for efficient allocation and storage of contiguous data.",
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1173..1176),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: "",
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1177..1255),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: " This collection manages a contiguous block of memory, allowing for storage",
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1256..1327),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: " of arbitrary data types while ensuring that stored items are placed",
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1328..1382),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: " adjacently and ensuring they're properly alligned.",
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1383..1386),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: "",
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1387..1401),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: " # Examples",
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1402..1405),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: "",
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1406..1413),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: " ```",
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1416..1419),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Macro {
                            attrs: [],
                            mac: Macro {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: include_str,
                                                span: bytes(1422..1433),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                bang_token: Not,
                                delimiter: MacroDelimiter::Paren(
                                    Paren,
                                ),
                                tokens: TokenStream [
                                    Literal {
                                        lit: "../examples/default_impl.rs",
                                        span: bytes(1435..1464),
                                    },
                                ],
                            },
                        },
                    },
                },
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::NameValue {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: doc,
                                        span: bytes(1467..1474),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        eq_token: Eq,
                        value: Expr::Lit {
                            attrs: [],
                            lit: Lit::Str {
                                token: " ```",
                            },
                        },
                    },
                },
            ],
            vis: Visibility::Public(
                Pub,
            ),
            struct_token: Struct,
            ident: Ident {
                sym: ContiguousMemory,
                span: bytes(1486..1502),
            },
            generics: Generics {
                lt_token: Some(
                    Lt,
                ),
                params: [
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: Impl,
                                span: bytes(1508..1512),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ImplDetails,
                                                        span: bytes(1514..1525),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: A,
                                                                                    span: bytes(1526..1527),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: Some(
                                Eq,
                            ),
                            default: Some(
                                Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: ImplDefault,
                                                    span: bytes(1531..1542),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            ),
                        },
                    ),
                    Comma,
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: A,
                                span: bytes(1548..1549),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ManageMemory,
                                                        span: bytes(1551..1563),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: Some(
                                Eq,
                            ),
                            default: Some(
                                Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: DefaultMemoryManager,
                                                    span: bytes(1566..1586),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            ),
                        },
                    ),
                    Comma,
                ],
                gt_token: Some(
                    Gt,
                ),
                where_clause: None,
            },
            fields: Fields::Named {
                brace_token: Brace,
                named: [
                    Field {
                        attrs: [],
                        vis: Visibility::Inherited,
                        mutability: FieldMutability::None,
                        ident: Some(
                            Ident {
                                sym: inner,
                                span: bytes(1596..1601),
                            },
                        ),
                        colon_token: Some(
                            Colon,
                        ),
                        ty: Type::Path {
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: Impl,
                                            span: bytes(1603..1607),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                    PathSep,
                                    PathSegment {
                                        ident: Ident {
                                            sym: StateRef,
                                            span: bytes(1609..1617),
                                        },
                                        arguments: PathArguments::AngleBracketed {
                                            colon2_token: None,
                                            lt_token: Lt,
                                            args: [
                                                GenericArgument::Type(
                                                    Type::Path {
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryState,
                                                                        span: bytes(1618..1629),
                                                                    },
                                                                    arguments: PathArguments::AngleBracketed {
                                                                        colon2_token: None,
                                                                        lt_token: Lt,
                                                                        args: [
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: Impl,
                                                                                                    span: bytes(1630..1634),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                            Comma,
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: A,
                                                                                                    span: bytes(1636..1637),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                        gt_token: Gt,
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ),
                                            ],
                                            gt_token: Gt,
                                        },
                                    },
                                ],
                            },
                        },
                    },
                    Comma,
                ],
            },
            semi_token: None,
        },
        Item::Struct {
            attrs: [
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::List {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: cfg,
                                        span: bytes(1646..1649),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        delimiter: MacroDelimiter::Paren(
                            Paren,
                        ),
                        tokens: TokenStream [
                            Ident {
                                sym: feature,
                                span: bytes(1650..1657),
                            },
                            Punct {
                                char: '=',
                                spacing: Alone,
                                span: bytes(1658..1659),
                            },
                            Literal {
                                lit: "sync_impl",
                                span: bytes(1660..1671),
                            },
                        ],
                    },
                },
            ],
            vis: Visibility::Public(
                Pub,
            ),
            struct_token: Struct,
            ident: Ident {
                sym: SyncContiguousMemory,
                span: bytes(1685..1705),
            },
            generics: Generics {
                lt_token: Some(
                    Lt,
                ),
                params: [
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: A,
                                span: bytes(1706..1707),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ManageMemory,
                                                        span: bytes(1709..1721),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: Some(
                                Eq,
                            ),
                            default: Some(
                                Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: DefaultMemoryManager,
                                                    span: bytes(1724..1744),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            ),
                        },
                    ),
                ],
                gt_token: Some(
                    Gt,
                ),
                where_clause: None,
            },
            fields: Fields::Named {
                brace_token: Brace,
                named: [
                    Field {
                        attrs: [],
                        vis: Visibility::Inherited,
                        mutability: FieldMutability::None,
                        ident: Some(
                            Ident {
                                sym: inner,
                                span: bytes(1752..1757),
                            },
                        ),
                        colon_token: Some(
                            Colon,
                        ),
                        ty: Type::Path {
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: Arc,
                                            span: bytes(1759..1762),
                                        },
                                        arguments: PathArguments::AngleBracketed {
                                            colon2_token: None,
                                            lt_token: Lt,
                                            args: [
                                                GenericArgument::Type(
                                                    Type::Path {
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryState,
                                                                        span: bytes(1763..1774),
                                                                    },
                                                                    arguments: PathArguments::AngleBracketed {
                                                                        colon2_token: None,
                                                                        lt_token: Lt,
                                                                        args: [
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: ImplConcurrent,
                                                                                                    span: bytes(1775..1789),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                            Comma,
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: A,
                                                                                                    span: bytes(1791..1792),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                        gt_token: Gt,
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ),
                                            ],
                                            gt_token: Gt,
                                        },
                                    },
                                ],
                            },
                        },
                    },
                    Comma,
                ],
            },
            semi_token: None,
        },
        Item::Impl {
            attrs: [],
            defaultness: None,
            unsafety: None,
            impl_token: Impl,
            generics: Generics {
                lt_token: Some(
                    Lt,
                ),
                params: [
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: Impl,
                                span: bytes(1804..1808),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ImplDetails,
                                                        span: bytes(1810..1821),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: DefaultMemoryManager,
                                                                                    span: bytes(1822..1842),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                ],
                gt_token: Some(
                    Gt,
                ),
                where_clause: None,
            },
            trait_: None,
            self_ty: Type::Path {
                qself: None,
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: ContiguousMemory,
                                span: bytes(1845..1861),
                            },
                            arguments: PathArguments::AngleBracketed {
                                colon2_token: None,
                                lt_token: Lt,
                                args: [
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Impl,
                                                            span: bytes(1862..1866),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                ],
                                gt_token: Gt,
                            },
                        },
                    ],
                },
            },
            brace_token: Brace,
            items: [
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(1874..1949),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Creates a new, empty `ContiguousMemory` instance aligned with alignment",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(1954..1969),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " of `usize`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(1974..1977),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(1982..1996),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2001..2008),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2013..2040),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # #![allow(unused_mut)]",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2045..2086),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2091..2094),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2099..2145),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut storage = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2150..2157),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: new,
                            span: bytes(2169..2172),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(2178..2182),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Struct {
                                    attrs: [],
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: Self,
                                                    span: bytes(2193..2197),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                    brace_token: Brace,
                                    fields: [
                                        FieldValue {
                                            attrs: [],
                                            member: Member::Named(
                                                Ident {
                                                    sym: inner,
                                                    span: bytes(2212..2217),
                                                },
                                            ),
                                            colon_token: Some(
                                                Colon,
                                            ),
                                            expr: Expr::Call {
                                                attrs: [],
                                                func: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: Reference,
                                                                    span: bytes(2219..2228),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: new,
                                                                    span: bytes(2230..2233),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                paren_token: Paren,
                                                args: [
                                                    Expr::MethodCall {
                                                        attrs: [],
                                                        receiver: Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: MemoryState,
                                                                                span: bytes(2251..2262),
                                                                            },
                                                                            arguments: PathArguments::AngleBracketed {
                                                                                colon2_token: Some(
                                                                                    PathSep,
                                                                                ),
                                                                                lt_token: Lt,
                                                                                args: [
                                                                                    GenericArgument::Type(
                                                                                        Type::Path {
                                                                                            qself: None,
                                                                                            path: Path {
                                                                                                leading_colon: None,
                                                                                                segments: [
                                                                                                    PathSegment {
                                                                                                        ident: Ident {
                                                                                                            sym: Impl,
                                                                                                            span: bytes(2265..2269),
                                                                                                        },
                                                                                                        arguments: PathArguments::None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                    Comma,
                                                                                    GenericArgument::Type(
                                                                                        Type::Infer {
                                                                                            underscore_token: Underscore,
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                                gt_token: Gt,
                                                                            },
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: new,
                                                                                span: bytes(2275..2278),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Unsafe {
                                                                    attrs: [],
                                                                    unsafe_token: Unsafe,
                                                                    block: Block {
                                                                        brace_token: Brace,
                                                                        stmts: [
                                                                            Stmt::Expr(
                                                                                Expr::Call {
                                                                                    attrs: [],
                                                                                    func: Expr::Path {
                                                                                        attrs: [],
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: Layout,
                                                                                                        span: bytes(2308..2314),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                                PathSep,
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: from_size_align_unchecked,
                                                                                                        span: bytes(2316..2341),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                    paren_token: Paren,
                                                                                    args: [
                                                                                        Expr::Lit {
                                                                                            attrs: [],
                                                                                            lit: Lit::Int {
                                                                                                token: 0,
                                                                                            },
                                                                                        },
                                                                                        Comma,
                                                                                        Expr::Call {
                                                                                            attrs: [],
                                                                                            func: Expr::Path {
                                                                                                attrs: [],
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: align_of,
                                                                                                                span: bytes(2345..2353),
                                                                                                            },
                                                                                                            arguments: PathArguments::AngleBracketed {
                                                                                                                colon2_token: Some(
                                                                                                                    PathSep,
                                                                                                                ),
                                                                                                                lt_token: Lt,
                                                                                                                args: [
                                                                                                                    GenericArgument::Type(
                                                                                                                        Type::Path {
                                                                                                                            qself: None,
                                                                                                                            path: Path {
                                                                                                                                leading_colon: None,
                                                                                                                                segments: [
                                                                                                                                    PathSegment {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: usize,
                                                                                                                                            span: bytes(2356..2361),
                                                                                                                                        },
                                                                                                                                        arguments: PathArguments::None,
                                                                                                                                    },
                                                                                                                                ],
                                                                                                                            },
                                                                                                                        },
                                                                                                                    ),
                                                                                                                ],
                                                                                                                gt_token: Gt,
                                                                                                            },
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                            paren_token: Paren,
                                                                                            args: [],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                None,
                                                                            ),
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                        dot_token: Dot,
                                                        method: Ident {
                                                            sym: expect,
                                                            span: bytes(2402..2408),
                                                        },
                                                        turbofish: None,
                                                        paren_token: Paren,
                                                        args: [
                                                            Expr::Lit {
                                                                attrs: [],
                                                                lit: Lit::Str {
                                                                    token: "unable to create an empty container",
                                                                },
                                                            },
                                                        ],
                                                    },
                                                    Comma,
                                                ],
                                            },
                                        },
                                        Comma,
                                    ],
                                    dot2_token: None,
                                    rest: None,
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2485..2561),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Creates a new `ContiguousMemory` instance with the specified `capacity`,",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2566..2604),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " aligned with alignment of `usize`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2609..2612),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2617..2629),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2634..2637),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2642..2714),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if capacity exceeds `isize::MAX` bytes or the allocator can't",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2719..2757),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " provide required amount of memory.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2762..2765),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2770..2784),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2789..2796),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2801..2828),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # #![allow(unused_mut)]",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2833..2874),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2879..2882),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2887..2947),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut storage = ContiguousMemory::with_capacity(1024);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(2952..2995),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.capacity(), 1024);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3000..3066),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.align(), core::mem::align_of::<usize>());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3071..3078),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: with_capacity,
                            span: bytes(3090..3103),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: capacity,
                                            span: bytes(3104..3112),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(3114..3119),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(3124..3128),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Unary {
                                        attrs: [],
                                        op: UnOp::Not(
                                            Not,
                                        ),
                                        expr: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: is_layout_valid,
                                                                span: bytes(3143..3158),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: capacity,
                                                                    span: bytes(3159..3167),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                Comma,
                                                Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: align_of,
                                                                        span: bytes(3169..3177),
                                                                    },
                                                                    arguments: PathArguments::AngleBracketed {
                                                                        colon2_token: Some(
                                                                            PathSep,
                                                                        ),
                                                                        lt_token: Lt,
                                                                        args: [
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: usize,
                                                                                                    span: bytes(3180..3185),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                        gt_token: Gt,
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [],
                                                },
                                            ],
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Macro {
                                                    attrs: [],
                                                    mac: Macro {
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: panic,
                                                                        span: bytes(3204..3209),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        bang_token: Not,
                                                        delimiter: MacroDelimiter::Paren(
                                                            Paren,
                                                        ),
                                                        tokens: TokenStream [
                                                            Literal {
                                                                lit: "capacity too large; max: {}",
                                                                span: bytes(3228..3257),
                                                            },
                                                            Punct {
                                                                char: ',',
                                                                spacing: Alone,
                                                                span: bytes(3257..3258),
                                                            },
                                                            Ident {
                                                                sym: isize,
                                                                span: bytes(3275..3280),
                                                            },
                                                            Punct {
                                                                char: ':',
                                                                spacing: Joint,
                                                                span: bytes(3280..3281),
                                                            },
                                                            Punct {
                                                                char: ':',
                                                                spacing: Alone,
                                                                span: bytes(3281..3282),
                                                            },
                                                            Ident {
                                                                sym: MAX,
                                                                span: bytes(3282..3285),
                                                            },
                                                            Ident {
                                                                sym: as,
                                                                span: bytes(3286..3288),
                                                            },
                                                            Ident {
                                                                sym: usize,
                                                                span: bytes(3289..3294),
                                                            },
                                                            Punct {
                                                                char: '-',
                                                                spacing: Alone,
                                                                span: bytes(3295..3296),
                                                            },
                                                            Group {
                                                                delimiter: Parenthesis,
                                                                stream: TokenStream [
                                                                    Ident {
                                                                        sym: align_of,
                                                                        span: bytes(3298..3306),
                                                                    },
                                                                    Punct {
                                                                        char: ':',
                                                                        spacing: Joint,
                                                                        span: bytes(3306..3307),
                                                                    },
                                                                    Punct {
                                                                        char: ':',
                                                                        spacing: Joint,
                                                                        span: bytes(3307..3308),
                                                                    },
                                                                    Punct {
                                                                        char: '<',
                                                                        spacing: Alone,
                                                                        span: bytes(3308..3309),
                                                                    },
                                                                    Ident {
                                                                        sym: usize,
                                                                        span: bytes(3309..3314),
                                                                    },
                                                                    Punct {
                                                                        char: '>',
                                                                        spacing: Alone,
                                                                        span: bytes(3314..3315),
                                                                    },
                                                                    Group {
                                                                        delimiter: Parenthesis,
                                                                        stream: TokenStream [],
                                                                        span: bytes(3315..3317),
                                                                    },
                                                                    Punct {
                                                                        char: '-',
                                                                        spacing: Alone,
                                                                        span: bytes(3318..3319),
                                                                    },
                                                                    Literal {
                                                                        lit: 1,
                                                                        span: bytes(3320..3321),
                                                                    },
                                                                ],
                                                                span: bytes(3297..3322),
                                                            },
                                                        ],
                                                    },
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                None,
                            ),
                            Stmt::Expr(
                                Expr::Call {
                                    attrs: [],
                                    func: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Self,
                                                        span: bytes(3355..3359),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: with_layout,
                                                        span: bytes(3361..3372),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    paren_token: Paren,
                                    args: [
                                        Expr::Unsafe {
                                            attrs: [],
                                            unsafe_token: Unsafe,
                                            block: Block {
                                                brace_token: Brace,
                                                stmts: [
                                                    Stmt::Expr(
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Layout,
                                                                                span: bytes(3394..3400),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: from_size_align_unchecked,
                                                                                span: bytes(3402..3427),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: capacity,
                                                                                    span: bytes(3428..3436),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                Comma,
                                                                Expr::Call {
                                                                    attrs: [],
                                                                    func: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: align_of,
                                                                                        span: bytes(3438..3446),
                                                                                    },
                                                                                    arguments: PathArguments::AngleBracketed {
                                                                                        colon2_token: Some(
                                                                                            PathSep,
                                                                                        ),
                                                                                        lt_token: Lt,
                                                                                        args: [
                                                                                            GenericArgument::Type(
                                                                                                Type::Path {
                                                                                                    qself: None,
                                                                                                    path: Path {
                                                                                                        leading_colon: None,
                                                                                                        segments: [
                                                                                                            PathSegment {
                                                                                                                ident: Ident {
                                                                                                                    sym: usize,
                                                                                                                    span: bytes(3449..3454),
                                                                                                                },
                                                                                                                arguments: PathArguments::None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        gt_token: Gt,
                                                                                    },
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                            ],
                                                        },
                                                        None,
                                                    ),
                                                ],
                                            },
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3481..3557),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Creates a new `ContiguousMemory` instance with capacity and alignment of",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3562..3588),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " the provided `layout`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3593..3596),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3601..3613),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3618..3621),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3626..3698),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if capacity exceeds `isize::MAX` bytes or the allocator can't",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3703..3741),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " provide required amount of memory.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3746..3749),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3754..3768),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3773..3780),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3785..3812),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # #![allow(unused_mut)]",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3817..3845),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use core::mem::align_of;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3850..3878),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use core::alloc::Layout;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3883..3924),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3929..3932),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3937..3989),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut storage = ContiguousMemory::with_layout(",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(3994..4058),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     Layout::from_size_align(512, align_of::<u32>()).unwrap()",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4063..4069),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " );",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4074..4116),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.capacity(), 512);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4121..4174),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.align(), align_of::<u32>());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4179..4186),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: with_layout,
                            span: bytes(4198..4209),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: layout,
                                            span: bytes(4210..4216),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Layout,
                                                        span: bytes(4218..4224),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(4229..4233),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Struct {
                                    attrs: [],
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: Self,
                                                    span: bytes(4244..4248),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                    brace_token: Brace,
                                    fields: [
                                        FieldValue {
                                            attrs: [],
                                            member: Member::Named(
                                                Ident {
                                                    sym: inner,
                                                    span: bytes(4263..4268),
                                                },
                                            ),
                                            colon_token: Some(
                                                Colon,
                                            ),
                                            expr: Expr::Match {
                                                attrs: [],
                                                match_token: Match,
                                                expr: Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryState,
                                                                        span: bytes(4276..4287),
                                                                    },
                                                                    arguments: PathArguments::AngleBracketed {
                                                                        colon2_token: Some(
                                                                            PathSep,
                                                                        ),
                                                                        lt_token: Lt,
                                                                        args: [
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: Impl,
                                                                                                    span: bytes(4290..4294),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                            Comma,
                                                                            GenericArgument::Type(
                                                                                Type::Infer {
                                                                                    underscore_token: Underscore,
                                                                                },
                                                                            ),
                                                                        ],
                                                                        gt_token: Gt,
                                                                    },
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: new,
                                                                        span: bytes(4300..4303),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: layout,
                                                                            span: bytes(4304..4310),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                                brace_token: Brace,
                                                arms: [
                                                    Arm {
                                                        attrs: [],
                                                        pat: Pat::TupleStruct {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Ok,
                                                                            span: bytes(4330..4332),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                            paren_token: Paren,
                                                            elems: [
                                                                Pat::Ident {
                                                                    attrs: [],
                                                                    by_ref: None,
                                                                    mutability: None,
                                                                    ident: Ident {
                                                                        sym: it,
                                                                        span: bytes(4333..4335),
                                                                    },
                                                                    subpat: None,
                                                                },
                                                            ],
                                                        },
                                                        guard: None,
                                                        fat_arrow_token: FatArrow,
                                                        body: Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Reference,
                                                                                span: bytes(4340..4349),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: new,
                                                                                span: bytes(4351..4354),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: it,
                                                                                    span: bytes(4355..4357),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                        comma: Some(
                                                            Comma,
                                                        ),
                                                    },
                                                    Arm {
                                                        attrs: [],
                                                        pat: Pat::TupleStruct {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Err,
                                                                            span: bytes(4376..4379),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                            paren_token: Paren,
                                                            elems: [
                                                                Pat::Wild {
                                                                    attrs: [],
                                                                    underscore_token: Underscore,
                                                                },
                                                            ],
                                                        },
                                                        guard: None,
                                                        fat_arrow_token: FatArrow,
                                                        body: Expr::Macro {
                                                            attrs: [],
                                                            mac: Macro {
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: unreachable,
                                                                                span: bytes(4386..4397),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                                bang_token: Not,
                                                                delimiter: MacroDelimiter::Paren(
                                                                    Paren,
                                                                ),
                                                                tokens: TokenStream [
                                                                    Literal {
                                                                        lit: "unable to create a container with layout: {:?}",
                                                                        span: bytes(4399..4447),
                                                                    },
                                                                    Punct {
                                                                        char: ',',
                                                                        spacing: Alone,
                                                                        span: bytes(4447..4448),
                                                                    },
                                                                    Ident {
                                                                        sym: layout,
                                                                        span: bytes(4449..4455),
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        comma: Some(
                                                            Comma,
                                                        ),
                                                    },
                                                ],
                                            },
                                        },
                                        Comma,
                                    ],
                                    dot2_token: None,
                                    rest: None,
                                },
                                None,
                            ),
                        ],
                    },
                },
            ],
        },
        Item::Impl {
            attrs: [
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::Path {
                        leading_colon: None,
                        segments: [
                            PathSegment {
                                ident: Ident {
                                    sym: contiguous_mem_gen_sync,
                                    span: bytes(4494..4517),
                                },
                                arguments: PathArguments::None,
                            },
                            PathSep,
                            PathSegment {
                                ident: Ident {
                                    sym: gen_sync,
                                    span: bytes(4519..4527),
                                },
                                arguments: PathArguments::None,
                            },
                        ],
                    },
                },
            ],
            defaultness: None,
            unsafety: None,
            impl_token: Impl,
            generics: Generics {
                lt_token: Some(
                    Lt,
                ),
                params: [
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: Impl,
                                span: bytes(4534..4538),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ImplDetails,
                                                        span: bytes(4540..4551),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: A,
                                                                                    span: bytes(4552..4553),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                    Comma,
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: A,
                                span: bytes(4556..4557),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ManageMemory,
                                                        span: bytes(4559..4571),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                ],
                gt_token: Some(
                    Gt,
                ),
                where_clause: None,
            },
            trait_: None,
            self_ty: Type::Path {
                qself: None,
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: ContiguousMemory,
                                span: bytes(4573..4589),
                            },
                            arguments: PathArguments::AngleBracketed {
                                colon2_token: None,
                                lt_token: Lt,
                                args: [
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Impl,
                                                            span: bytes(4590..4594),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                    Comma,
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: A,
                                                            span: bytes(4596..4597),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                ],
                                gt_token: Gt,
                            },
                        },
                    ],
                },
            },
            brace_token: Brace,
            items: [
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4605..4680),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Creates a new, empty `ContiguousMemory` instance aligned with alignment",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4685..4734),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " of `usize` that uses the specified allocator.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4739..4742),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4747..4761),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4766..4773),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4778..4805),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # #![allow(unused_mut)]",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4810..4840),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # use core::mem::align_of;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4845..4886),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4891..4944),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::memory::DefaultMemoryManager;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4949..4952),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(4957..5008),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut storage = ContiguousMemory::with_alloc(",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5013..5041),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     DefaultMemoryManager",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5046..5052),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " );",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5057..5097),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.capacity(), 0);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5102..5157),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.align(), align_of::<usize>());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5162..5169),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: with_alloc,
                            span: bytes(5181..5191),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: alloc,
                                            span: bytes(5192..5197),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: A,
                                                        span: bytes(5199..5200),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(5205..5209),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Unsafe {
                                    attrs: [],
                                    unsafe_token: Unsafe,
                                    block: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Struct {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: Self,
                                                                    span: bytes(5241..5245),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    brace_token: Brace,
                                                    fields: [
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: inner,
                                                                    span: bytes(5264..5269),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::Call {
                                                                attrs: [],
                                                                func: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: Reference,
                                                                                    span: bytes(5271..5280),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                            PathSep,
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: new,
                                                                                    span: bytes(5282..5285),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                paren_token: Paren,
                                                                args: [
                                                                    Expr::MethodCall {
                                                                        attrs: [],
                                                                        receiver: Expr::Call {
                                                                            attrs: [],
                                                                            func: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: MemoryState,
                                                                                                span: bytes(5307..5318),
                                                                                            },
                                                                                            arguments: PathArguments::AngleBracketed {
                                                                                                colon2_token: Some(
                                                                                                    PathSep,
                                                                                                ),
                                                                                                lt_token: Lt,
                                                                                                args: [
                                                                                                    GenericArgument::Type(
                                                                                                        Type::Path {
                                                                                                            qself: None,
                                                                                                            path: Path {
                                                                                                                leading_colon: None,
                                                                                                                segments: [
                                                                                                                    PathSegment {
                                                                                                                        ident: Ident {
                                                                                                                            sym: Impl,
                                                                                                                            span: bytes(5321..5325),
                                                                                                                        },
                                                                                                                        arguments: PathArguments::None,
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        },
                                                                                                    ),
                                                                                                    Comma,
                                                                                                    GenericArgument::Type(
                                                                                                        Type::Infer {
                                                                                                            underscore_token: Underscore,
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                                gt_token: Gt,
                                                                                            },
                                                                                        },
                                                                                        PathSep,
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: new_with_alloc,
                                                                                                span: bytes(5331..5345),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            paren_token: Paren,
                                                                            args: [
                                                                                Expr::Call {
                                                                                    attrs: [],
                                                                                    func: Expr::Path {
                                                                                        attrs: [],
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: Layout,
                                                                                                        span: bytes(5371..5377),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                                PathSep,
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: from_size_align_unchecked,
                                                                                                        span: bytes(5379..5404),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                    paren_token: Paren,
                                                                                    args: [
                                                                                        Expr::Lit {
                                                                                            attrs: [],
                                                                                            lit: Lit::Int {
                                                                                                token: 0,
                                                                                            },
                                                                                        },
                                                                                        Comma,
                                                                                        Expr::Call {
                                                                                            attrs: [],
                                                                                            func: Expr::Path {
                                                                                                attrs: [],
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: align_of,
                                                                                                                span: bytes(5408..5416),
                                                                                                            },
                                                                                                            arguments: PathArguments::AngleBracketed {
                                                                                                                colon2_token: Some(
                                                                                                                    PathSep,
                                                                                                                ),
                                                                                                                lt_token: Lt,
                                                                                                                args: [
                                                                                                                    GenericArgument::Type(
                                                                                                                        Type::Path {
                                                                                                                            qself: None,
                                                                                                                            path: Path {
                                                                                                                                leading_colon: None,
                                                                                                                                segments: [
                                                                                                                                    PathSegment {
                                                                                                                                        ident: Ident {
                                                                                                                                            sym: usize,
                                                                                                                                            span: bytes(5419..5424),
                                                                                                                                        },
                                                                                                                                        arguments: PathArguments::None,
                                                                                                                                    },
                                                                                                                                ],
                                                                                                                            },
                                                                                                                        },
                                                                                                                    ),
                                                                                                                ],
                                                                                                                gt_token: Gt,
                                                                                                            },
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                            paren_token: Paren,
                                                                                            args: [],
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                Comma,
                                                                                Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: alloc,
                                                                                                    span: bytes(5454..5459),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                                Comma,
                                                                            ],
                                                                        },
                                                                        dot_token: Dot,
                                                                        method: Ident {
                                                                            sym: expect,
                                                                            span: bytes(5504..5510),
                                                                        },
                                                                        turbofish: None,
                                                                        paren_token: Paren,
                                                                        args: [
                                                                            Expr::Lit {
                                                                                attrs: [],
                                                                                lit: Lit::Str {
                                                                                    token: "unable to create an empty container",
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                    Comma,
                                                                ],
                                                            },
                                                        },
                                                        Comma,
                                                    ],
                                                    dot2_token: None,
                                                    rest: None,
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5605..5681),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Creates a new `ContiguousMemory` instance with the specified `capacity`,",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5686..5724),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " aligned with alignment of `usize`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5729..5732),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5737..5751),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5756..5763),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5768..5795),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # #![allow(unused_mut)]",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5800..5830),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # use core::mem::align_of;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5835..5876),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5881..5934),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::memory::DefaultMemoryManager;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5939..5942),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(5947..6011),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut storage = ContiguousMemory::with_capacity_and_alloc(",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6016..6028),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     256,",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6033..6061),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     DefaultMemoryManager",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6066..6072),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " );",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6077..6119),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.capacity(), 256);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6124..6179),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.align(), align_of::<usize>());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6184..6191),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: with_capacity_and_alloc,
                            span: bytes(6203..6226),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: capacity,
                                            span: bytes(6227..6235),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(6237..6242),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: alloc,
                                            span: bytes(6244..6249),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: A,
                                                        span: bytes(6251..6252),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(6257..6261),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Unary {
                                        attrs: [],
                                        op: UnOp::Not(
                                            Not,
                                        ),
                                        expr: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: is_layout_valid,
                                                                span: bytes(6276..6291),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: capacity,
                                                                    span: bytes(6292..6300),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                Comma,
                                                Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: align_of,
                                                                        span: bytes(6302..6310),
                                                                    },
                                                                    arguments: PathArguments::AngleBracketed {
                                                                        colon2_token: Some(
                                                                            PathSep,
                                                                        ),
                                                                        lt_token: Lt,
                                                                        args: [
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: usize,
                                                                                                    span: bytes(6313..6318),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                        gt_token: Gt,
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [],
                                                },
                                            ],
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Macro {
                                                    attrs: [],
                                                    mac: Macro {
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: panic,
                                                                        span: bytes(6337..6342),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        bang_token: Not,
                                                        delimiter: MacroDelimiter::Paren(
                                                            Paren,
                                                        ),
                                                        tokens: TokenStream [
                                                            Literal {
                                                                lit: "capacity too large; max: {}",
                                                                span: bytes(6361..6390),
                                                            },
                                                            Punct {
                                                                char: ',',
                                                                spacing: Alone,
                                                                span: bytes(6390..6391),
                                                            },
                                                            Ident {
                                                                sym: isize,
                                                                span: bytes(6408..6413),
                                                            },
                                                            Punct {
                                                                char: ':',
                                                                spacing: Joint,
                                                                span: bytes(6413..6414),
                                                            },
                                                            Punct {
                                                                char: ':',
                                                                spacing: Alone,
                                                                span: bytes(6414..6415),
                                                            },
                                                            Ident {
                                                                sym: MAX,
                                                                span: bytes(6415..6418),
                                                            },
                                                            Ident {
                                                                sym: as,
                                                                span: bytes(6419..6421),
                                                            },
                                                            Ident {
                                                                sym: usize,
                                                                span: bytes(6422..6427),
                                                            },
                                                            Punct {
                                                                char: '-',
                                                                spacing: Alone,
                                                                span: bytes(6428..6429),
                                                            },
                                                            Group {
                                                                delimiter: Parenthesis,
                                                                stream: TokenStream [
                                                                    Ident {
                                                                        sym: align_of,
                                                                        span: bytes(6431..6439),
                                                                    },
                                                                    Punct {
                                                                        char: ':',
                                                                        spacing: Joint,
                                                                        span: bytes(6439..6440),
                                                                    },
                                                                    Punct {
                                                                        char: ':',
                                                                        spacing: Joint,
                                                                        span: bytes(6440..6441),
                                                                    },
                                                                    Punct {
                                                                        char: '<',
                                                                        spacing: Alone,
                                                                        span: bytes(6441..6442),
                                                                    },
                                                                    Ident {
                                                                        sym: usize,
                                                                        span: bytes(6442..6447),
                                                                    },
                                                                    Punct {
                                                                        char: '>',
                                                                        spacing: Alone,
                                                                        span: bytes(6447..6448),
                                                                    },
                                                                    Group {
                                                                        delimiter: Parenthesis,
                                                                        stream: TokenStream [],
                                                                        span: bytes(6448..6450),
                                                                    },
                                                                    Punct {
                                                                        char: '-',
                                                                        spacing: Alone,
                                                                        span: bytes(6451..6452),
                                                                    },
                                                                    Literal {
                                                                        lit: 1,
                                                                        span: bytes(6453..6454),
                                                                    },
                                                                ],
                                                                span: bytes(6430..6455),
                                                            },
                                                        ],
                                                    },
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                None,
                            ),
                            Stmt::Expr(
                                Expr::Unsafe {
                                    attrs: [],
                                    unsafe_token: Unsafe,
                                    block: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Self,
                                                                        span: bytes(6509..6513),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: with_layout_and_alloc,
                                                                        span: bytes(6515..6536),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Layout,
                                                                                span: bytes(6554..6560),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: from_size_align_unchecked,
                                                                                span: bytes(6562..6587),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: capacity,
                                                                                    span: bytes(6588..6596),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                Comma,
                                                                Expr::Call {
                                                                    attrs: [],
                                                                    func: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: align_of,
                                                                                        span: bytes(6598..6606),
                                                                                    },
                                                                                    arguments: PathArguments::AngleBracketed {
                                                                                        colon2_token: Some(
                                                                                            PathSep,
                                                                                        ),
                                                                                        lt_token: Lt,
                                                                                        args: [
                                                                                            GenericArgument::Type(
                                                                                                Type::Path {
                                                                                                    qself: None,
                                                                                                    path: Path {
                                                                                                        leading_colon: None,
                                                                                                        segments: [
                                                                                                            PathSegment {
                                                                                                                ident: Ident {
                                                                                                                    sym: usize,
                                                                                                                    span: bytes(6609..6614),
                                                                                                                },
                                                                                                                arguments: PathArguments::None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                        gt_token: Gt,
                                                                                    },
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                            ],
                                                        },
                                                        Comma,
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: alloc,
                                                                            span: bytes(6636..6641),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        Comma,
                                                    ],
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6678..6754),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Creates a new `ContiguousMemory` instance with capacity and alignment of",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6759..6785),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " the provided `layout`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6790..6793),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6798..6810),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6815..6818),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6823..6895),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if the provided allocator fails to allocate initial `layout`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6900..6903),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6908..6922),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6927..6934),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6939..6966),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # #![allow(unused_mut)]",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(6971..6999),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use core::mem::align_of;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7004..7032),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use core::alloc::Layout;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7037..7078),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7083..7136),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::memory::DefaultMemoryManager;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7141..7144),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7149..7211),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut storage = ContiguousMemory::with_layout_and_alloc(",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7216..7279),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     Layout::from_size_align(0, align_of::<u32>()).unwrap(),",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7284..7312),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     DefaultMemoryManager",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7317..7323),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " );",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7328..7368),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.capacity(), 0);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7373..7426),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # assert_eq!(storage.align(), align_of::<u32>());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7431..7438),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: with_layout_and_alloc,
                            span: bytes(7450..7471),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: layout,
                                            span: bytes(7472..7478),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Layout,
                                                        span: bytes(7480..7486),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: alloc,
                                            span: bytes(7488..7493),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: A,
                                                        span: bytes(7495..7496),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(7501..7505),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Struct {
                                    attrs: [],
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: Self,
                                                    span: bytes(7516..7520),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                    brace_token: Brace,
                                    fields: [
                                        FieldValue {
                                            attrs: [],
                                            member: Member::Named(
                                                Ident {
                                                    sym: inner,
                                                    span: bytes(7535..7540),
                                                },
                                            ),
                                            colon_token: Some(
                                                Colon,
                                            ),
                                            expr: Expr::Match {
                                                attrs: [],
                                                match_token: Match,
                                                expr: Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryState,
                                                                        span: bytes(7548..7559),
                                                                    },
                                                                    arguments: PathArguments::AngleBracketed {
                                                                        colon2_token: Some(
                                                                            PathSep,
                                                                        ),
                                                                        lt_token: Lt,
                                                                        args: [
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: Impl,
                                                                                                    span: bytes(7562..7566),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                            Comma,
                                                                            GenericArgument::Type(
                                                                                Type::Infer {
                                                                                    underscore_token: Underscore,
                                                                                },
                                                                            ),
                                                                        ],
                                                                        gt_token: Gt,
                                                                    },
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: new_with_alloc,
                                                                        span: bytes(7572..7586),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: layout,
                                                                            span: bytes(7587..7593),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        Comma,
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: alloc,
                                                                            span: bytes(7595..7600),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                                brace_token: Brace,
                                                arms: [
                                                    Arm {
                                                        attrs: [],
                                                        pat: Pat::TupleStruct {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Ok,
                                                                            span: bytes(7620..7622),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                            paren_token: Paren,
                                                            elems: [
                                                                Pat::Ident {
                                                                    attrs: [],
                                                                    by_ref: None,
                                                                    mutability: None,
                                                                    ident: Ident {
                                                                        sym: it,
                                                                        span: bytes(7623..7625),
                                                                    },
                                                                    subpat: None,
                                                                },
                                                            ],
                                                        },
                                                        guard: None,
                                                        fat_arrow_token: FatArrow,
                                                        body: Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Reference,
                                                                                span: bytes(7630..7639),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: new,
                                                                                span: bytes(7641..7644),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: it,
                                                                                    span: bytes(7645..7647),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                        comma: Some(
                                                            Comma,
                                                        ),
                                                    },
                                                    Arm {
                                                        attrs: [],
                                                        pat: Pat::TupleStruct {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Err,
                                                                            span: bytes(7666..7669),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                            paren_token: Paren,
                                                            elems: [
                                                                Pat::Wild {
                                                                    attrs: [],
                                                                    underscore_token: Underscore,
                                                                },
                                                            ],
                                                        },
                                                        guard: None,
                                                        fat_arrow_token: FatArrow,
                                                        body: Expr::Macro {
                                                            attrs: [],
                                                            mac: Macro {
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: panic,
                                                                                span: bytes(7676..7681),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                                bang_token: Not,
                                                                delimiter: MacroDelimiter::Paren(
                                                                    Paren,
                                                                ),
                                                                tokens: TokenStream [
                                                                    Literal {
                                                                        lit: "unable to create a container with layout: {:?}",
                                                                        span: bytes(7683..7731),
                                                                    },
                                                                    Punct {
                                                                        char: ',',
                                                                        spacing: Alone,
                                                                        span: bytes(7731..7732),
                                                                    },
                                                                    Ident {
                                                                        sym: layout,
                                                                        span: bytes(7733..7739),
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        comma: Some(
                                                            Comma,
                                                        ),
                                                    },
                                                ],
                                            },
                                        },
                                        Comma,
                                    ],
                                    dot2_token: None,
                                    rest: None,
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7778..7831),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Returns the base address of the allocated memory.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7836..7839),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7844..7858),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7863..7870),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7875..7916),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7921..7924),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7929..7969),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(7974..8005),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.base(), None);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8010..8013),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8018..8040),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r = s.push(6);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8045..8086),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.base().is_some(), true);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8091..8098),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: base,
                            span: bytes(8110..8114),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(8116..8120),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: MemoryBase,
                                                span: bytes(8125..8135),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Unary {
                                    attrs: [],
                                    op: UnOp::Deref(
                                        Star,
                                    ),
                                    expr: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: ReadableInner,
                                                                span: bytes(8147..8160),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: read_named,
                                                                span: bytes(8162..8172),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Reference {
                                                    attrs: [],
                                                    and_token: And,
                                                    mutability: None,
                                                    expr: Expr::Field {
                                                        attrs: [],
                                                        base: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: self,
                                                                                span: bytes(8174..8178),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: inner,
                                                                    span: bytes(8179..8184),
                                                                },
                                                            ),
                                                        },
                                                        dot_token: Dot,
                                                        member: Member::Named(
                                                            Ident {
                                                                sym: base,
                                                                span: bytes(8185..8189),
                                                            },
                                                        ),
                                                    },
                                                },
                                                Comma,
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: LockTarget,
                                                                    span: bytes(8191..8201),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: BaseAddress,
                                                                    span: bytes(8203..8214),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: expect,
                                            span: bytes(8229..8235),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [
                                            Expr::Lit {
                                                attrs: [],
                                                lit: Lit::Str {
                                                    token: "can't read base",
                                                },
                                            },
                                        ],
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8266..8341),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Returns a pointer to the base address of the allocated memory or `null`",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8346..8383),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " if the container didn't allocate.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8388..8391),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8396..8410),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8415..8422),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8427..8451),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use core::ptr::null;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8456..8497),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8502..8505),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8510..8550),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8555..8592),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.base_ptr(), null());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8597..8600),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8605..8627),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r = s.push(3);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8632..8668),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert!(s.base_ptr() != null());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8673..8680),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: inline,
                                            span: bytes(8687..8693),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: base_ptr,
                            span: bytes(8706..8714),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(8716..8720),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Ptr {
                                star_token: Star,
                                const_token: Some(
                                    Const,
                                ),
                                mutability: None,
                                elem: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: u8,
                                                    span: bytes(8732..8734),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(8745..8749),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: base,
                                            span: bytes(8750..8754),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [],
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: as_ptr,
                                        span: bytes(8757..8763),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8777..8845),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Returns the current capacity (in bytes) of the memory container.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8850..8853),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8858..8928),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " The capacity represents the size of the memory block that has been",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(8933..9005),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " allocated for storing data. It may be larger than the amount of data",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9010..9052),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " currently stored within the container.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9057..9060),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9065..9079),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9084..9091),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9096..9137),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9142..9145),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9150..9190),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9195..9227),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.capacity(), 0);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9232..9235),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9240..9265),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r1 = s.push(1u8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9270..9302),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.capacity(), 1);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9307..9310),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9315..9362),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " // will add required padding for alignment:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9367..9393),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r2 = s.push(2u32);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9398..9430),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.capacity(), 8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9435..9438),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9443..9483),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " // will fill empty region before r2:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9488..9513),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r3 = s.push(3u8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9518..9543),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r4 = s.push(4u8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9548..9580),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.capacity(), 8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9585..9592),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: inline,
                                            span: bytes(9599..9605),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: capacity,
                            span: bytes(9618..9626),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(9628..9632),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: usize,
                                                span: bytes(9637..9642),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(9653..9657),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: base,
                                            span: bytes(9658..9662),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [],
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: size,
                                        span: bytes(9665..9669),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9683..9754),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Returns the total size of all stored entries excluding the padding.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9759..9762),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9767..9781),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9786..9793),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9798..9839),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9844..9847),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9852..9892),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9897..9925),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.size(), 0);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9930..9933),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9938..9963),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r1 = s.push(1u8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(9968..9996),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.size(), 1);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10001..10004),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10009..10056),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " // will add required padding for alignment:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10061..10087),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r2 = s.push(2u32);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10092..10120),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.size(), 5);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10125..10128),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10133..10173),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " // will fill empty region before r2:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10178..10203),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r3 = s.push(3u8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10208..10233),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r4 = s.push(4u8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10238..10266),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.size(), 7);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10271..10278),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: size,
                            span: bytes(10290..10294),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(10296..10300),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: usize,
                                                span: bytes(10305..10310),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Binary {
                                    attrs: [],
                                    left: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(10321..10325),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: capacity,
                                            span: bytes(10326..10334),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [],
                                    },
                                    op: BinOp::Sub(
                                        Minus,
                                    ),
                                    right: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Call {
                                                attrs: [],
                                                func: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: ReadableInner,
                                                                    span: bytes(10351..10364),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: read_named,
                                                                    span: bytes(10366..10376),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                paren_token: Paren,
                                                args: [
                                                    Expr::Reference {
                                                        attrs: [],
                                                        and_token: And,
                                                        mutability: None,
                                                        expr: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: self,
                                                                                    span: bytes(10378..10382),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: inner,
                                                                        span: bytes(10383..10388),
                                                                    },
                                                                ),
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: tracker,
                                                                    span: bytes(10389..10396),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                    Comma,
                                                    Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: LockTarget,
                                                                        span: bytes(10398..10408),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: SegmentTracker,
                                                                        span: bytes(10410..10424),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: unwrap,
                                                span: bytes(10443..10449),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: count_free,
                                            span: bytes(10469..10479),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [],
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10493..10543),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Returns the alignment of the memory container.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10548..10551),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10556..10570),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10575..10582),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10587..10614),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # #![allow(unused_mut)]",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10619..10647),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use core::mem::align_of;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10652..10693),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10698..10701),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10706..10746),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10751..10798),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.align(), align_of::<usize>());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10803..10810),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: inline,
                                            span: bytes(10817..10823),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: align,
                            span: bytes(10836..10841),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(10843..10847),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: usize,
                                                span: bytes(10852..10857),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(10868..10872),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: base,
                                            span: bytes(10873..10877),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [],
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: alignment,
                                        span: bytes(10880..10889),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10903..10970),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Returns the layout of the memory region containing stored data.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10975..10978),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(10983..10997),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11002..11009),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11014..11042),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use core::alloc::Layout;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11047..11075),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use core::mem::align_of;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11080..11121),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11126..11129),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11134..11174),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11179..11194),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11199..11218),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     s.layout(),",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11223..11287),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     Layout::from_size_align(0, align_of::<usize>()).unwrap()",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11292..11298),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " );",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11303..11338),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r = s.push(b\"Hello world\");",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11343..11358),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11363..11382),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     s.layout(),",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11387..11451),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     Layout::from_size_align(8, align_of::<usize>()).unwrap()",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11456..11462),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " );",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11467..11474),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: layout,
                            span: bytes(11486..11492),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(11494..11498),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Layout,
                                                span: bytes(11503..11509),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(11520..11524),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: base,
                                            span: bytes(11525..11529),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [],
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: layout,
                                        span: bytes(11532..11538),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11552..11621),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Returns `true` if provided generic type `T` can be stored without",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11626..11652),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " growing the container.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11657..11660),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11665..11679),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11684..11691),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11696..11737),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11742..11745),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11750..11790),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11795..11840),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.can_push_t::<u32>(), false);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11845..11848),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11853..11879),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r1 = s.push(1u32);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11884..11929),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.can_push_t::<u32>(), false);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11934..11937),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11942..11968),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r2 = s.push(2u32);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(11973..11999),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r3 = s.push(3u32);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12004..12048),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.can_push_t::<u32>(), true);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12053..12060),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: inline,
                                            span: bytes(12067..12073),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: can_push_t,
                            span: bytes(12086..12096),
                        },
                        generics: Generics {
                            lt_token: Some(
                                Lt,
                            ),
                            params: [
                                GenericParam::Type(
                                    TypeParam {
                                        attrs: [],
                                        ident: Ident {
                                            sym: T,
                                            span: bytes(12097..12098),
                                        },
                                        colon_token: None,
                                        bounds: [],
                                        eq_token: None,
                                        default: None,
                                    },
                                ),
                            ],
                            gt_token: Some(
                                Gt,
                            ),
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(12101..12105),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: bool,
                                                span: bytes(12110..12114),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: self,
                                                        span: bytes(12125..12129),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: can_push,
                                        span: bytes(12130..12138),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [
                                        Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Layout,
                                                                span: bytes(12139..12145),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: new,
                                                                span: bytes(12147..12150),
                                                            },
                                                            arguments: PathArguments::AngleBracketed {
                                                                colon2_token: Some(
                                                                    PathSep,
                                                                ),
                                                                lt_token: Lt,
                                                                args: [
                                                                    GenericArgument::Type(
                                                                        Type::Path {
                                                                            qself: None,
                                                                            path: Path {
                                                                                leading_colon: None,
                                                                                segments: [
                                                                                    PathSegment {
                                                                                        ident: Ident {
                                                                                            sym: T,
                                                                                            span: bytes(12153..12154),
                                                                                        },
                                                                                        arguments: PathArguments::None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ),
                                                                ],
                                                                gt_token: Gt,
                                                            },
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [],
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12170..12246),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Returns `true` if the provided `value` can be stored without growing the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12251..12265),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " container.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12270..12273),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12278..12351),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `value` can either be a [`Layout`] or a reference to a `Sized` value.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12356..12359),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12364..12378),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12383..12390),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12395..12423),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use core::alloc::Layout;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12428..12469),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12474..12477),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12482..12522),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12527..12530),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12535..12566),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r1 = s.push([0u32; 4]);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12571..12574),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12579..12601),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let a = [1u32; 2];",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12606..12644),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.can_push(&a), false);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12649..12672),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r2 = s.push(a);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12677..12680),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12685..12740),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.can_push(Layout::new::<u64>()), true);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(12745..12752),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: can_push,
                            span: bytes(12764..12772),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(12774..12778),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: value,
                                            span: bytes(12780..12785),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::ImplTrait {
                                        impl_token: Impl,
                                        bounds: [
                                            TypeParamBound::Trait(
                                                TraitBound {
                                                    paren_token: None,
                                                    modifier: TraitBoundModifier::None,
                                                    lifetimes: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: HasLayout,
                                                                    span: bytes(12792..12801),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: bool,
                                                span: bytes(12806..12810),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: layout,
                                        span: bytes(12825..12831),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: value,
                                                                span: bytes(12834..12839),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: as_layout,
                                                span: bytes(12840..12849),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: tracker,
                                        span: bytes(12865..12872),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Call {
                                                attrs: [],
                                                func: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: ReadableInner,
                                                                    span: bytes(12887..12900),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: read_named,
                                                                    span: bytes(12902..12912),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                paren_token: Paren,
                                                args: [
                                                    Expr::Reference {
                                                        attrs: [],
                                                        and_token: And,
                                                        mutability: None,
                                                        expr: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: self,
                                                                                    span: bytes(12914..12918),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: inner,
                                                                        span: bytes(12919..12924),
                                                                    },
                                                                ),
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: tracker,
                                                                    span: bytes(12925..12932),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                    Comma,
                                                    Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: LockTarget,
                                                                        span: bytes(12934..12944),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: SegmentTracker,
                                                                        span: bytes(12946..12960),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: unwrap,
                                                span: bytes(12962..12968),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: base,
                                        span: bytes(12984..12988),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: self,
                                                                span: bytes(12991..12995),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: base,
                                                span: bytes(12996..13000),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: tracker,
                                                        span: bytes(13012..13019),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: can_store,
                                        span: bytes(13020..13029),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: base,
                                                            span: bytes(13030..13034),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        Comma,
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: layout,
                                                            span: bytes(13036..13042),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13055..13118),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Grows the memory container to the specified `new_capacity`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13123..13126),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13131..13205),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`MemoryBase`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13210..13285),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(MemoryBase))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13290..13315),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13320..13323),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13328..13340),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13345..13348),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13353..13421),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if the new capacity exceeds `isize::MAX` or the allocator",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13426..13446),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " operation fails.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13451..13454),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13459..13473),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13478..13485),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13490..13531),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13536..13539),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13544..13595),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::with_capacity(4);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13600..13632),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.capacity(), 4);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13637..13665),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.size(), 0);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13670..13673),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13678..13703),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r = s.push(1u32);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13708..13736),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.size(), 4);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13741..13782),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.can_push(&2u32), false);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13787..13790),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13795..13812),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " s.grow_to(8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13817..13857),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.can_push(&2u32), true);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(13862..13869),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: grow_to,
                            span: bytes(13881..13888),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(13894..13898),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: new_capacity,
                                            span: bytes(13900..13912),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(13914..13919),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Option,
                                                span: bytes(13924..13930),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryBase,
                                                                            span: bytes(13931..13941),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Match {
                                    attrs: [],
                                    match_token: Match,
                                    expr: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(13959..13963),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: try_grow_to,
                                            span: bytes(13964..13975),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [
                                            Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: new_capacity,
                                                                span: bytes(13976..13988),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                    brace_token: Brace,
                                    arms: [
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Ok,
                                                                span: bytes(14004..14006),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: it,
                                                            span: bytes(14007..14009),
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: it,
                                                                span: bytes(14014..14016),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(14030..14033),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(14034..14045),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: TooLarge,
                                                                        span: bytes(14047..14055),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(14060..14065),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "new capacity exceeds `isize::MAX`",
                                                            span: bytes(14067..14102),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(14117..14120),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::TupleStruct {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(14121..14132),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Allocator,
                                                                        span: bytes(14134..14143),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        paren_token: Paren,
                                                        elems: [
                                                            Pat::Wild {
                                                                attrs: [],
                                                                underscore_token: Underscore,
                                                            },
                                                        ],
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(14151..14156),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "allocator error",
                                                            span: bytes(14158..14175),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14199..14270),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Tries growing the memory container to the specified `new_capacity`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14275..14278),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14283..14357),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`MemoryBase`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14362..14437),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(MemoryBase))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14442..14467),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14472..14475),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14480..14550),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the new capacity exceeds `isize::MAX` or the allocator couldn't",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14555..14615),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " allocate required memory, a [`MemoryError`] is returned.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14620..14623),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14628..14642),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14647..14654),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14659..14700),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14705..14708),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14713..14753),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14758..14761),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14766..14807),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert!(s.try_grow_to(1024).is_ok());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14812..14815),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14820..14849),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let el_count: usize = 42;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14854..14911),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let el_size: usize = 288230376151711744; // bad read?",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14916..14919),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14924..14964),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut required_size: usize = 1024;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(14969..14995),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " for i in 0..el_count {",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(15000..15033),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     required_size += el_size;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(15038..15043),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " }",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(15048..15099),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert!(s.try_grow_to(required_size).is_err());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(15104..15111),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: try_grow_to,
                            span: bytes(15123..15134),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(15140..15144),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: new_capacity,
                                            span: bytes(15146..15158),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(15160..15165),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Result,
                                                span: bytes(15170..15176),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Option,
                                                                            span: bytes(15177..15183),
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: None,
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: MemoryBase,
                                                                                                        span: bytes(15184..15194),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryError,
                                                                            span: bytes(15197..15208),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: Some(
                                        Mut,
                                    ),
                                    ident: Ident {
                                        sym: base,
                                        span: bytes(15228..15232),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Call {
                                                attrs: [],
                                                func: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: WritableInner,
                                                                    span: bytes(15247..15260),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: write_named,
                                                                    span: bytes(15262..15273),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                paren_token: Paren,
                                                args: [
                                                    Expr::Reference {
                                                        attrs: [],
                                                        and_token: And,
                                                        mutability: None,
                                                        expr: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: self,
                                                                                    span: bytes(15275..15279),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: inner,
                                                                        span: bytes(15280..15285),
                                                                    },
                                                                ),
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: base,
                                                                    span: bytes(15286..15290),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                    Comma,
                                                    Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: LockTarget,
                                                                        span: bytes(15292..15302),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: BaseAddress,
                                                                        span: bytes(15304..15315),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: unwrap,
                                                span: bytes(15317..15323),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: old_capacity,
                                        span: bytes(15340..15352),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: base,
                                                                span: bytes(15355..15359),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: size,
                                                span: bytes(15360..15364),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: new_capacity,
                                        span: bytes(15380..15392),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::MethodCall {
                                                attrs: [],
                                                receiver: Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: WritableInner,
                                                                        span: bytes(15407..15420),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: write_named,
                                                                        span: bytes(15422..15433),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Reference {
                                                            attrs: [],
                                                            and_token: And,
                                                            mutability: None,
                                                            expr: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Field {
                                                                    attrs: [],
                                                                    base: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: self,
                                                                                        span: bytes(15435..15439),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    member: Member::Named(
                                                                        Ident {
                                                                            sym: inner,
                                                                            span: bytes(15440..15445),
                                                                        },
                                                                    ),
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: tracker,
                                                                        span: bytes(15446..15453),
                                                                    },
                                                                ),
                                                            },
                                                        },
                                                        Comma,
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: LockTarget,
                                                                            span: bytes(15455..15465),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: SegmentTracker,
                                                                            span: bytes(15467..15481),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                                dot_token: Dot,
                                                method: Ident {
                                                    sym: unwrap,
                                                    span: bytes(15500..15506),
                                                },
                                                turbofish: None,
                                                paren_token: Paren,
                                                args: [],
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: grow,
                                                span: bytes(15526..15530),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: new_capacity,
                                                                    span: bytes(15531..15543),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Binary {
                                        attrs: [],
                                        left: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: new_capacity,
                                                            span: bytes(15557..15569),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        op: BinOp::Eq(
                                            EqEq,
                                        ),
                                        right: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: old_capacity,
                                                            span: bytes(15573..15585),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Return {
                                                    attrs: [],
                                                    return_token: Return,
                                                    expr: Some(
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Ok,
                                                                                span: bytes(15607..15609),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: None,
                                                                                    span: bytes(15610..15614),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                                Some(
                                                    Semi,
                                                ),
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                Some(
                                    Semi,
                                ),
                            ),
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: old_layout,
                                        span: bytes(15641..15651),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: base,
                                                                span: bytes(15654..15658),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: layout,
                                                span: bytes(15659..15665),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: new_layout,
                                        span: bytes(15681..15691),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Try {
                                            attrs: [],
                                            expr: Expr::MethodCall {
                                                attrs: [],
                                                receiver: Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Layout,
                                                                        span: bytes(15694..15700),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: from_size_align,
                                                                        span: bytes(15702..15717),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: new_capacity,
                                                                            span: bytes(15718..15730),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        Comma,
                                                        Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: base,
                                                                                span: bytes(15732..15736),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: alignment,
                                                                span: bytes(15737..15746),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [],
                                                        },
                                                    ],
                                                },
                                                dot_token: Dot,
                                                method: Ident {
                                                    sym: map_err,
                                                    span: bytes(15763..15770),
                                                },
                                                turbofish: None,
                                                paren_token: Paren,
                                                args: [
                                                    Expr::Closure {
                                                        attrs: [],
                                                        lifetimes: None,
                                                        constness: None,
                                                        movability: None,
                                                        asyncness: None,
                                                        capture: None,
                                                        or1_token: Or,
                                                        inputs: [
                                                            Pat::Wild {
                                                                attrs: [],
                                                                underscore_token: Underscore,
                                                            },
                                                        ],
                                                        or2_token: Or,
                                                        output: ReturnType::Default,
                                                        body: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryError,
                                                                            span: bytes(15775..15786),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: TooLarge,
                                                                            span: bytes(15788..15796),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    },
                                                ],
                                            },
                                            question_token: Question,
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: prev_base,
                                        span: bytes(15813..15822),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Unary {
                                            attrs: [],
                                            op: UnOp::Deref(
                                                Star,
                                            ),
                                            expr: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: base,
                                                                span: bytes(15826..15830),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::Assign {
                                    attrs: [],
                                    left: Expr::Field {
                                        attrs: [],
                                        base: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: base,
                                                            span: bytes(15840..15844),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        member: Member::Named(
                                            Ident {
                                                sym: address,
                                                span: bytes(15845..15852),
                                            },
                                        ),
                                    },
                                    eq_token: Eq,
                                    right: Expr::Unsafe {
                                        attrs: [],
                                        unsafe_token: Unsafe,
                                        block: Block {
                                            brace_token: Brace,
                                            stmts: [
                                                Stmt::Expr(
                                                    Expr::Try {
                                                        attrs: [],
                                                        expr: Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Field {
                                                                    attrs: [],
                                                                    base: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: self,
                                                                                        span: bytes(15876..15880),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    member: Member::Named(
                                                                        Ident {
                                                                            sym: inner,
                                                                            span: bytes(15881..15886),
                                                                        },
                                                                    ),
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: alloc,
                                                                        span: bytes(15904..15909),
                                                                    },
                                                                ),
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: grow,
                                                                span: bytes(15927..15931),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Field {
                                                                    attrs: [],
                                                                    base: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: prev_base,
                                                                                        span: bytes(15932..15941),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    member: Member::Named(
                                                                        Ident {
                                                                            sym: address,
                                                                            span: bytes(15942..15949),
                                                                        },
                                                                    ),
                                                                },
                                                                Comma,
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: old_layout,
                                                                                    span: bytes(15951..15961),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                Comma,
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: new_layout,
                                                                                    span: bytes(15963..15973),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                        question_token: Question,
                                                    },
                                                    None,
                                                ),
                                            ],
                                        },
                                    },
                                },
                                Some(
                                    Semi,
                                ),
                            ),
                            Stmt::Expr(
                                Expr::Call {
                                    attrs: [],
                                    func: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Ok,
                                                        span: bytes(15996..15998),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    paren_token: Paren,
                                    args: [
                                        Expr::If {
                                            attrs: [],
                                            if_token: If,
                                            cond: Expr::Binary {
                                                attrs: [],
                                                left: Expr::Field {
                                                    attrs: [],
                                                    base: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: base,
                                                                        span: bytes(16002..16006),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    member: Member::Named(
                                                        Ident {
                                                            sym: address,
                                                            span: bytes(16007..16014),
                                                        },
                                                    ),
                                                },
                                                op: BinOp::Ne(
                                                    Ne,
                                                ),
                                                right: Expr::Field {
                                                    attrs: [],
                                                    base: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: prev_base,
                                                                        span: bytes(16018..16027),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    member: Member::Named(
                                                        Ident {
                                                            sym: address,
                                                            span: bytes(16028..16035),
                                                        },
                                                    ),
                                                },
                                            },
                                            then_branch: Block {
                                                brace_token: Brace,
                                                stmts: [
                                                    Stmt::Expr(
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Some,
                                                                                span: bytes(16050..16054),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Unary {
                                                                    attrs: [],
                                                                    op: UnOp::Deref(
                                                                        Star,
                                                                    ),
                                                                    expr: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: base,
                                                                                        span: bytes(16056..16060),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                        None,
                                                    ),
                                                ],
                                            },
                                            else_branch: Some(
                                                (
                                                    Else,
                                                    Expr::Block {
                                                        attrs: [],
                                                        label: None,
                                                        block: Block {
                                                            brace_token: Brace,
                                                            stmts: [
                                                                Stmt::Expr(
                                                                    Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: None,
                                                                                        span: bytes(16091..16095),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    None,
                                                                ),
                                                            ],
                                                        },
                                                    },
                                                ),
                                            ),
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(16118..16184),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Handles reserving capacity while ensuring appropriate padding.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: inline,
                                            span: bytes(16191..16197),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    ],
                    vis: Visibility::Inherited,
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: ensure_free_section,
                            span: bytes(16206..16225),
                        },
                        generics: Generics {
                            lt_token: Some(
                                Lt,
                            ),
                            params: [
                                GenericParam::Const(
                                    ConstParam {
                                        attrs: [],
                                        const_token: Const,
                                        ident: Ident {
                                            sym: EXACT,
                                            span: bytes(16232..16237),
                                        },
                                        colon_token: Colon,
                                        ty: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: bool,
                                                            span: bytes(16239..16243),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        eq_token: None,
                                        default: None,
                                    },
                                ),
                            ],
                            gt_token: Some(
                                Gt,
                            ),
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(16259..16263),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: required,
                                            span: bytes(16273..16281),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(16283..16288),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: align,
                                            span: bytes(16298..16303),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Option,
                                                        span: bytes(16305..16311),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: usize,
                                                                                    span: bytes(16312..16317),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                            Comma,
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Result,
                                                span: bytes(16329..16335),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Option,
                                                                            span: bytes(16336..16342),
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: None,
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: MemoryBase,
                                                                                                        span: bytes(16343..16353),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryError,
                                                                            span: bytes(16356..16367),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Tuple {
                                    attrs: [],
                                    paren_token: Paren,
                                    elems: [
                                        Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: capacity,
                                                span: bytes(16384..16392),
                                            },
                                            subpat: None,
                                        },
                                        Comma,
                                        Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: last_offset,
                                                span: bytes(16394..16405),
                                            },
                                            subpat: None,
                                        },
                                        Comma,
                                        Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: largest_free,
                                                span: bytes(16407..16419),
                                            },
                                            subpat: None,
                                        },
                                        Comma,
                                        Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: tailing_free,
                                                span: bytes(16421..16433),
                                            },
                                            subpat: None,
                                        },
                                    ],
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Block {
                                            attrs: [],
                                            label: None,
                                            block: Block {
                                                brace_token: Brace,
                                                stmts: [
                                                    Stmt::Local {
                                                        attrs: [],
                                                        let_token: Let,
                                                        pat: Pat::Ident {
                                                            attrs: [],
                                                            by_ref: None,
                                                            mutability: None,
                                                            ident: Ident {
                                                                sym: tracker,
                                                                span: bytes(16455..16462),
                                                            },
                                                            subpat: None,
                                                        },
                                                        init: Some(
                                                            LocalInit {
                                                                eq_token: Eq,
                                                                expr: Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Call {
                                                                        attrs: [],
                                                                        func: Expr::Path {
                                                                            attrs: [],
                                                                            qself: None,
                                                                            path: Path {
                                                                                leading_colon: None,
                                                                                segments: [
                                                                                    PathSegment {
                                                                                        ident: Ident {
                                                                                            sym: ReadableInner,
                                                                                            span: bytes(16481..16494),
                                                                                        },
                                                                                        arguments: PathArguments::None,
                                                                                    },
                                                                                    PathSep,
                                                                                    PathSegment {
                                                                                        ident: Ident {
                                                                                            sym: read_named,
                                                                                            span: bytes(16496..16506),
                                                                                        },
                                                                                        arguments: PathArguments::None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                        paren_token: Paren,
                                                                        args: [
                                                                            Expr::Reference {
                                                                                attrs: [],
                                                                                and_token: And,
                                                                                mutability: None,
                                                                                expr: Expr::Field {
                                                                                    attrs: [],
                                                                                    base: Expr::Field {
                                                                                        attrs: [],
                                                                                        base: Expr::Path {
                                                                                            attrs: [],
                                                                                            qself: None,
                                                                                            path: Path {
                                                                                                leading_colon: None,
                                                                                                segments: [
                                                                                                    PathSegment {
                                                                                                        ident: Ident {
                                                                                                            sym: self,
                                                                                                            span: bytes(16508..16512),
                                                                                                        },
                                                                                                        arguments: PathArguments::None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                        dot_token: Dot,
                                                                                        member: Member::Named(
                                                                                            Ident {
                                                                                                sym: inner,
                                                                                                span: bytes(16513..16518),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                    dot_token: Dot,
                                                                                    member: Member::Named(
                                                                                        Ident {
                                                                                            sym: tracker,
                                                                                            span: bytes(16519..16526),
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            },
                                                                            Comma,
                                                                            Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: LockTarget,
                                                                                                span: bytes(16528..16538),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                        PathSep,
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: SegmentTracker,
                                                                                                span: bytes(16540..16554),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: unwrap,
                                                                        span: bytes(16556..16562),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                                diverge: None,
                                                            },
                                                        ),
                                                        semi_token: Semi,
                                                    },
                                                    Stmt::Expr(
                                                        Expr::Tuple {
                                                            attrs: [],
                                                            paren_token: Paren,
                                                            elems: [
                                                                Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: tracker,
                                                                                        span: bytes(16596..16603),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: size,
                                                                        span: bytes(16604..16608),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                                Comma,
                                                                Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: tracker,
                                                                                        span: bytes(16628..16635),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: last_offset,
                                                                        span: bytes(16636..16647),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                                Comma,
                                                                Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: tracker,
                                                                                        span: bytes(16667..16674),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: largest_free_range,
                                                                        span: bytes(16675..16693),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                                Comma,
                                                                Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: tracker,
                                                                                        span: bytes(16713..16720),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: tailing_free_bytes,
                                                                        span: bytes(16721..16739),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                                Comma,
                                                            ],
                                                        },
                                                        None,
                                                    ),
                                                ],
                                            },
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: base_pos,
                                        span: bytes(16780..16788),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Cast {
                                            attrs: [],
                                            expr: Expr::MethodCall {
                                                attrs: [],
                                                receiver: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: self,
                                                                    span: bytes(16791..16795),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                dot_token: Dot,
                                                method: Ident {
                                                    sym: base_ptr,
                                                    span: bytes(16796..16804),
                                                },
                                                turbofish: None,
                                                paren_token: Paren,
                                                args: [],
                                            },
                                            as_token: As,
                                            ty: Type::Path {
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: usize,
                                                                span: bytes(16810..16815),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Let {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::TupleStruct {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Some,
                                                            span: bytes(16833..16837),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            paren_token: Paren,
                                            elems: [
                                                Pat::Ident {
                                                    attrs: [],
                                                    by_ref: None,
                                                    mutability: None,
                                                    ident: Ident {
                                                        sym: largest,
                                                        span: bytes(16838..16845),
                                                    },
                                                    subpat: None,
                                                },
                                            ],
                                        },
                                        eq_token: Eq,
                                        expr: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: largest_free,
                                                            span: bytes(16849..16861),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: debug_assert,
                                                                    span: bytes(16876..16888),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Ident {
                                                            sym: base_pos,
                                                            span: bytes(16890..16898),
                                                        },
                                                        Punct {
                                                            char: '!',
                                                            spacing: Joint,
                                                            span: bytes(16899..16900),
                                                        },
                                                        Punct {
                                                            char: '=',
                                                            spacing: Alone,
                                                            span: bytes(16900..16901),
                                                        },
                                                        Literal {
                                                            lit: 0,
                                                            span: bytes(16902..16903),
                                                        },
                                                    ],
                                                },
                                                semi_token: Some(
                                                    Semi,
                                                ),
                                            },
                                            Stmt::Local {
                                                attrs: [],
                                                let_token: Let,
                                                pat: Pat::Ident {
                                                    attrs: [],
                                                    by_ref: None,
                                                    mutability: None,
                                                    ident: Ident {
                                                        sym: largest_size,
                                                        span: bytes(16923..16935),
                                                    },
                                                    subpat: None,
                                                },
                                                init: Some(
                                                    LocalInit {
                                                        eq_token: Eq,
                                                        expr: Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: align,
                                                                                        span: bytes(16938..16943),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: map,
                                                                        span: bytes(16961..16964),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [
                                                                        Expr::Closure {
                                                                            attrs: [],
                                                                            lifetimes: None,
                                                                            constness: None,
                                                                            movability: None,
                                                                            asyncness: None,
                                                                            capture: None,
                                                                            or1_token: Or,
                                                                            inputs: [
                                                                                Pat::Ident {
                                                                                    attrs: [],
                                                                                    by_ref: None,
                                                                                    mutability: None,
                                                                                    ident: Ident {
                                                                                        sym: a,
                                                                                        span: bytes(16966..16967),
                                                                                    },
                                                                                    subpat: None,
                                                                                },
                                                                            ],
                                                                            or2_token: Or,
                                                                            output: ReturnType::Default,
                                                                            body: Expr::MethodCall {
                                                                                attrs: [],
                                                                                receiver: Expr::MethodCall {
                                                                                    attrs: [],
                                                                                    receiver: Expr::Path {
                                                                                        attrs: [],
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: largest,
                                                                                                        span: bytes(16969..16976),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                    dot_token: Dot,
                                                                                    method: Ident {
                                                                                        sym: offset,
                                                                                        span: bytes(16977..16983),
                                                                                    },
                                                                                    turbofish: None,
                                                                                    paren_token: Paren,
                                                                                    args: [
                                                                                        Expr::Path {
                                                                                            attrs: [],
                                                                                            qself: None,
                                                                                            path: Path {
                                                                                                leading_colon: None,
                                                                                                segments: [
                                                                                                    PathSegment {
                                                                                                        ident: Ident {
                                                                                                            sym: base_pos,
                                                                                                            span: bytes(16984..16992),
                                                                                                        },
                                                                                                        arguments: PathArguments::None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                    ],
                                                                                },
                                                                                dot_token: Dot,
                                                                                method: Ident {
                                                                                    sym: aligned,
                                                                                    span: bytes(16994..17001),
                                                                                },
                                                                                turbofish: None,
                                                                                paren_token: Paren,
                                                                                args: [
                                                                                    Expr::Path {
                                                                                        attrs: [],
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: a,
                                                                                                        span: bytes(17002..17003),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: unwrap_or,
                                                                    span: bytes(17023..17032),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [
                                                                    Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: largest,
                                                                                        span: bytes(17033..17040),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: len,
                                                                span: bytes(17059..17062),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [],
                                                        },
                                                        diverge: None,
                                                    },
                                                ),
                                                semi_token: Semi,
                                            },
                                            Stmt::Expr(
                                                Expr::If {
                                                    attrs: [],
                                                    if_token: If,
                                                    cond: Expr::Binary {
                                                        attrs: [],
                                                        left: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: largest_size,
                                                                            span: bytes(17082..17094),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        op: BinOp::Ge(
                                                            Ge,
                                                        ),
                                                        right: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: required,
                                                                            span: bytes(17098..17106),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    },
                                                    then_branch: Block {
                                                        brace_token: Brace,
                                                        stmts: [
                                                            Stmt::Expr(
                                                                Expr::Return {
                                                                    attrs: [],
                                                                    return_token: Return,
                                                                    expr: Some(
                                                                        Expr::Call {
                                                                            attrs: [],
                                                                            func: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: Ok,
                                                                                                span: bytes(17132..17134),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            paren_token: Paren,
                                                                            args: [
                                                                                Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: None,
                                                                                                    span: bytes(17135..17139),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ],
                                                                        },
                                                                    ),
                                                                },
                                                                Some(
                                                                    Semi,
                                                                ),
                                                            ),
                                                        ],
                                                    },
                                                    else_branch: None,
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                None,
                            ),
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: padding,
                                        span: bytes(17179..17186),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Match {
                                            attrs: [],
                                            match_token: Match,
                                            expr: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: align,
                                                                span: bytes(17195..17200),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            brace_token: Brace,
                                            arms: [
                                                Arm {
                                                    attrs: [],
                                                    pat: Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: None,
                                                            span: bytes(17215..17219),
                                                        },
                                                        subpat: None,
                                                    },
                                                    guard: None,
                                                    fat_arrow_token: FatArrow,
                                                    body: Expr::Lit {
                                                        attrs: [],
                                                        lit: Lit::Int {
                                                            token: 0,
                                                        },
                                                    },
                                                    comma: Some(
                                                        Comma,
                                                    ),
                                                },
                                                Arm {
                                                    attrs: [],
                                                    pat: Pat::TupleStruct {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Some,
                                                                        span: bytes(17238..17242),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        paren_token: Paren,
                                                        elems: [
                                                            Pat::Ident {
                                                                attrs: [],
                                                                by_ref: None,
                                                                mutability: None,
                                                                ident: Ident {
                                                                    sym: a,
                                                                    span: bytes(17243..17244),
                                                                },
                                                                subpat: None,
                                                            },
                                                        ],
                                                    },
                                                    guard: None,
                                                    fat_arrow_token: FatArrow,
                                                    body: Expr::Block {
                                                        attrs: [],
                                                        label: None,
                                                        block: Block {
                                                            brace_token: Brace,
                                                            stmts: [
                                                                Stmt::Local {
                                                                    attrs: [],
                                                                    let_token: Let,
                                                                    pat: Pat::Ident {
                                                                        attrs: [],
                                                                        by_ref: None,
                                                                        mutability: None,
                                                                        ident: Ident {
                                                                            sym: pos,
                                                                            span: bytes(17433..17436),
                                                                        },
                                                                        subpat: None,
                                                                    },
                                                                    init: Some(
                                                                        LocalInit {
                                                                            eq_token: Eq,
                                                                            expr: Expr::If {
                                                                                attrs: [],
                                                                                if_token: If,
                                                                                cond: Expr::Binary {
                                                                                    attrs: [],
                                                                                    left: Expr::Path {
                                                                                        attrs: [],
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: capacity,
                                                                                                        span: bytes(17442..17450),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                    op: BinOp::Gt(
                                                                                        Gt,
                                                                                    ),
                                                                                    right: Expr::Lit {
                                                                                        attrs: [],
                                                                                        lit: Lit::Int {
                                                                                            token: 0,
                                                                                        },
                                                                                    },
                                                                                },
                                                                                then_branch: Block {
                                                                                    brace_token: Brace,
                                                                                    stmts: [
                                                                                        Stmt::Expr(
                                                                                            Expr::Binary {
                                                                                                attrs: [],
                                                                                                left: Expr::Path {
                                                                                                    attrs: [],
                                                                                                    qself: None,
                                                                                                    path: Path {
                                                                                                        leading_colon: None,
                                                                                                        segments: [
                                                                                                            PathSegment {
                                                                                                                ident: Ident {
                                                                                                                    sym: base_pos,
                                                                                                                    span: bytes(17477..17485),
                                                                                                                },
                                                                                                                arguments: PathArguments::None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                },
                                                                                                op: BinOp::Add(
                                                                                                    Plus,
                                                                                                ),
                                                                                                right: Expr::Path {
                                                                                                    attrs: [],
                                                                                                    qself: None,
                                                                                                    path: Path {
                                                                                                        leading_colon: None,
                                                                                                        segments: [
                                                                                                            PathSegment {
                                                                                                                ident: Ident {
                                                                                                                    sym: last_offset,
                                                                                                                    span: bytes(17488..17499),
                                                                                                                },
                                                                                                                arguments: PathArguments::None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            None,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                                else_branch: Some(
                                                                                    (
                                                                                        Else,
                                                                                        Expr::Block {
                                                                                            attrs: [],
                                                                                            label: None,
                                                                                            block: Block {
                                                                                                brace_token: Brace,
                                                                                                stmts: [
                                                                                                    Stmt::Expr(
                                                                                                        Expr::MethodCall {
                                                                                                            attrs: [],
                                                                                                            receiver: Expr::Path {
                                                                                                                attrs: [],
                                                                                                                qself: None,
                                                                                                                path: Path {
                                                                                                                    leading_colon: None,
                                                                                                                    segments: [
                                                                                                                        PathSegment {
                                                                                                                            ident: Ident {
                                                                                                                                sym: self,
                                                                                                                                span: bytes(17679..17683),
                                                                                                                            },
                                                                                                                            arguments: PathArguments::None,
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            },
                                                                                                            dot_token: Dot,
                                                                                                            method: Ident {
                                                                                                                sym: align,
                                                                                                                span: bytes(17684..17689),
                                                                                                            },
                                                                                                            turbofish: None,
                                                                                                            paren_token: Paren,
                                                                                                            args: [],
                                                                                                        },
                                                                                                        None,
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                    ),
                                                                                ),
                                                                            },
                                                                            diverge: None,
                                                                        },
                                                                    ),
                                                                    semi_token: Semi,
                                                                },
                                                                Stmt::Local {
                                                                    attrs: [],
                                                                    let_token: Let,
                                                                    pat: Pat::Ident {
                                                                        attrs: [],
                                                                        by_ref: None,
                                                                        mutability: None,
                                                                        ident: Ident {
                                                                            sym: extra,
                                                                            span: bytes(17731..17736),
                                                                        },
                                                                        subpat: None,
                                                                    },
                                                                    init: Some(
                                                                        LocalInit {
                                                                            eq_token: Eq,
                                                                            expr: Expr::Binary {
                                                                                attrs: [],
                                                                                left: Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: pos,
                                                                                                    span: bytes(17739..17742),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                                op: BinOp::Rem(
                                                                                    Percent,
                                                                                ),
                                                                                right: Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: a,
                                                                                                    span: bytes(17745..17746),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            },
                                                                            diverge: None,
                                                                        },
                                                                    ),
                                                                    semi_token: Semi,
                                                                },
                                                                Stmt::Expr(
                                                                    Expr::If {
                                                                        attrs: [],
                                                                        if_token: If,
                                                                        cond: Expr::Binary {
                                                                            attrs: [],
                                                                            left: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: extra,
                                                                                                span: bytes(17819..17824),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            op: BinOp::Gt(
                                                                                Gt,
                                                                            ),
                                                                            right: Expr::Lit {
                                                                                attrs: [],
                                                                                lit: Lit::Int {
                                                                                    token: 0,
                                                                                },
                                                                            },
                                                                        },
                                                                        then_branch: Block {
                                                                            brace_token: Brace,
                                                                            stmts: [
                                                                                Stmt::Expr(
                                                                                    Expr::Binary {
                                                                                        attrs: [],
                                                                                        left: Expr::Path {
                                                                                            attrs: [],
                                                                                            qself: None,
                                                                                            path: Path {
                                                                                                leading_colon: None,
                                                                                                segments: [
                                                                                                    PathSegment {
                                                                                                        ident: Ident {
                                                                                                            sym: a,
                                                                                                            span: bytes(17851..17852),
                                                                                                        },
                                                                                                        arguments: PathArguments::None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                        op: BinOp::Sub(
                                                                                            Minus,
                                                                                        ),
                                                                                        right: Expr::Path {
                                                                                            attrs: [],
                                                                                            qself: None,
                                                                                            path: Path {
                                                                                                leading_colon: None,
                                                                                                segments: [
                                                                                                    PathSegment {
                                                                                                        ident: Ident {
                                                                                                            sym: extra,
                                                                                                            span: bytes(17855..17860),
                                                                                                        },
                                                                                                        arguments: PathArguments::None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    None,
                                                                                ),
                                                                            ],
                                                                        },
                                                                        else_branch: Some(
                                                                            (
                                                                                Else,
                                                                                Expr::Block {
                                                                                    attrs: [],
                                                                                    label: None,
                                                                                    block: Block {
                                                                                        brace_token: Brace,
                                                                                        stmts: [
                                                                                            Stmt::Expr(
                                                                                                Expr::Lit {
                                                                                                    attrs: [],
                                                                                                    lit: Lit::Int {
                                                                                                        token: 0,
                                                                                                    },
                                                                                                },
                                                                                                None,
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ),
                                                                    },
                                                                    None,
                                                                ),
                                                            ],
                                                        },
                                                    },
                                                    comma: None,
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: Some(
                                        Mut,
                                    ),
                                    ident: Ident {
                                        sym: additional,
                                        span: bytes(17968..17978),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Binary {
                                            attrs: [],
                                            left: Expr::Binary {
                                                attrs: [],
                                                left: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: required,
                                                                    span: bytes(17981..17989),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                op: BinOp::Add(
                                                    Plus,
                                                ),
                                                right: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: padding,
                                                                    span: bytes(17992..17999),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            },
                                            op: BinOp::Sub(
                                                Minus,
                                            ),
                                            right: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: tailing_free,
                                                                span: bytes(18002..18014),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Unary {
                                        attrs: [],
                                        op: UnOp::Not(
                                            Not,
                                        ),
                                        expr: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: EXACT,
                                                            span: bytes(18028..18033),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Assign {
                                                    attrs: [],
                                                    left: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: additional,
                                                                        span: bytes(18048..18058),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    eq_token: Eq,
                                                    right: Expr::Call {
                                                        attrs: [],
                                                        func: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: core,
                                                                            span: bytes(18061..18065),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: cmp,
                                                                            span: bytes(18067..18070),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: max,
                                                                            span: bytes(18072..18075),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        paren_token: Paren,
                                                        args: [
                                                            Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: capacity,
                                                                                span: bytes(18076..18084),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            Comma,
                                                            Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: additional,
                                                                                span: bytes(18086..18096),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                                Some(
                                                    Semi,
                                                ),
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                None,
                            ),
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: self,
                                                        span: bytes(18118..18122),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: try_grow_to,
                                        span: bytes(18123..18134),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [
                                        Expr::Binary {
                                            attrs: [],
                                            left: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: capacity,
                                                                span: bytes(18135..18143),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            op: BinOp::Add(
                                                Plus,
                                            ),
                                            right: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: additional,
                                                                span: bytes(18146..18156),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18169..18244),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Grows the underlying memory to ensure container has a free segment that",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18249..18274),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " can store `capacity`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18279..18351),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This function might allocate more than requested amount of memory to",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18356..18391),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " reduce number of reallocations.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18396..18399),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18404..18475),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`BasePtr`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18480..18552),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(BasePtr))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18557..18582),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18587..18590),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18595..18662),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " After calling this function, new capacity will be greater than:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18667..18696),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `self.size() + capacity`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18701..18704),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18709..18721),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18726..18729),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18734..18806),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if attempting to grow the container to a capacity larger than",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(18811..18876),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `isize::MAX` or the allocator can't allocate required memory.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: inline,
                                            span: bytes(18883..18889),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: reserve,
                            span: bytes(18902..18909),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(18915..18919),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: capacity,
                                            span: bytes(18921..18929),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(18931..18936),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Option,
                                                span: bytes(18941..18947),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryBase,
                                                                            span: bytes(18948..18958),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Match {
                                    attrs: [],
                                    match_token: Match,
                                    expr: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(18976..18980),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: try_reserve,
                                            span: bytes(18981..18992),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [
                                            Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: capacity,
                                                                span: bytes(18993..19001),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                    brace_token: Brace,
                                    arms: [
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Ok,
                                                                span: bytes(19017..19019),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: it,
                                                            span: bytes(19020..19022),
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: it,
                                                                span: bytes(19027..19029),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(19043..19046),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(19047..19058),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: TooLarge,
                                                                        span: bytes(19060..19068),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(19073..19078),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "new capacity exceeds `isize::MAX`",
                                                            span: bytes(19080..19115),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(19130..19133),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::TupleStruct {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(19134..19145),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Allocator,
                                                                        span: bytes(19147..19156),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        paren_token: Paren,
                                                        elems: [
                                                            Pat::Wild {
                                                                attrs: [],
                                                                underscore_token: Underscore,
                                                            },
                                                        ],
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(19164..19169),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "unable to allocate more memory",
                                                            span: bytes(19171..19203),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19227..19297),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Tries growing the underlying memory to ensure container has a free",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19302..19340),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " segment that can store `capacity`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19345..19417),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This function might allocate more than requested amount of memory to",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19422..19457),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " reduce number of reallocations.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19462..19465),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19470..19541),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`BasePtr`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19546..19618),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(BasePtr))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19623..19648),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19653..19656),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19661..19731),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the new capacity exceeds `isize::MAX` or the allocator couldn't",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19736..19796),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " allocate required memory, a [`MemoryError`] is returned.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19801..19804),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19809..19876),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " After calling this function, new capacity will be greater than:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(19881..19910),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `self.size() + capacity`.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: try_reserve,
                            span: bytes(19922..19933),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(19939..19943),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: capacity,
                                            span: bytes(19945..19953),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(19955..19960),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Result,
                                                span: bytes(19965..19971),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Option,
                                                                            span: bytes(19972..19978),
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: None,
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: MemoryBase,
                                                                                                        span: bytes(19979..19989),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryError,
                                                                            span: bytes(19992..20003),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Binary {
                                        attrs: [],
                                        left: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: capacity,
                                                            span: bytes(20018..20026),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        op: BinOp::Eq(
                                            EqEq,
                                        ),
                                        right: Expr::Lit {
                                            attrs: [],
                                            lit: Lit::Int {
                                                token: 0,
                                            },
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Return {
                                                    attrs: [],
                                                    return_token: Return,
                                                    expr: Some(
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Ok,
                                                                                span: bytes(20053..20055),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: None,
                                                                                    span: bytes(20056..20060),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                                Some(
                                                    Semi,
                                                ),
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                None,
                            ),
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: self,
                                                        span: bytes(20081..20085),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: ensure_free_section,
                                        span: bytes(20086..20105),
                                    },
                                    turbofish: Some(
                                        AngleBracketedGenericArguments {
                                            colon2_token: Some(
                                                PathSep,
                                            ),
                                            lt_token: Lt,
                                            args: [
                                                GenericArgument::Const(
                                                    Expr::Lit {
                                                        attrs: [],
                                                        lit: Lit::Bool {
                                                            value: false,
                                                        },
                                                    },
                                                ),
                                            ],
                                            gt_token: Gt,
                                        },
                                    ),
                                    paren_token: Paren,
                                    args: [
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: capacity,
                                                            span: bytes(20115..20123),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        Comma,
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: None,
                                                            span: bytes(20125..20129),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20142..20217),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Grows the underlying memory to ensure container has a free segment that",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20222..20247),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " can store `capacity`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20252..20255),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20260..20331),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`BasePtr`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20336..20408),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(BasePtr))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20413..20438),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20443..20446),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20451..20514),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " After calling this function, new capacity will be equal to:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20519..20548),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `self.size() + capacity`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20553..20556),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20561..20573),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20578..20581),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20586..20658),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if attempting to grow the container to a capacity larger than",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20663..20728),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `isize::MAX` or the allocator can't allocate required memory.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20733..20736),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20741..20755),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20760..20767),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20772..20813),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20818..20821),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20826..20877),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::with_capacity(4);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20882..20914),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.capacity(), 4);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20919..20922),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20927..20952),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let r = s.push(1u32);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(20957..20996),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.capacity(), s.size());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21001..21042),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.can_push(&2u32), false);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21047..21050),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21055..21078),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " s.reserve_exact(4);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21083..21115),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.capacity(), 8);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21120..21160),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.can_push(&2u32), true);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21165..21172),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: inline,
                                            span: bytes(21179..21185),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: reserve_exact,
                            span: bytes(21198..21211),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(21217..21221),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: capacity,
                                            span: bytes(21223..21231),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(21233..21238),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Option,
                                                span: bytes(21243..21249),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryBase,
                                                                            span: bytes(21250..21260),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Match {
                                    attrs: [],
                                    match_token: Match,
                                    expr: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(21278..21282),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: try_reserve_exact,
                                            span: bytes(21283..21300),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [
                                            Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: capacity,
                                                                span: bytes(21301..21309),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                    brace_token: Brace,
                                    arms: [
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Ok,
                                                                span: bytes(21325..21327),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: it,
                                                            span: bytes(21328..21330),
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: it,
                                                                span: bytes(21335..21337),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(21351..21354),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(21355..21366),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: TooLarge,
                                                                        span: bytes(21368..21376),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(21381..21386),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "new capacity exceeds `isize::MAX`",
                                                            span: bytes(21388..21423),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(21438..21441),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::TupleStruct {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(21442..21453),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Allocator,
                                                                        span: bytes(21455..21464),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        paren_token: Paren,
                                                        elems: [
                                                            Pat::Wild {
                                                                attrs: [],
                                                                underscore_token: Underscore,
                                                            },
                                                        ],
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(21472..21477),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "unable to allocate more memory",
                                                            span: bytes(21479..21511),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21535..21605),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Tries growing the underlying memory to ensure container has a free",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21610..21648),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " segment that can store `capacity`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21653..21656),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21661..21732),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`BasePtr`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21737..21809),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(BasePtr))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21814..21839),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21844..21847),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21852..21922),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the new capacity exceeds `isize::MAX` or the allocator couldn't",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21927..21987),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " allocate required memory, a [`MemoryError`] is returned.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(21992..21995),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22000..22063),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " After calling this function, new capacity will be equal to:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22068..22097),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `self.size() + capacity`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22102..22105),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22110..22124),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22129..22136),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22141..22182),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use contiguous_mem::ContiguousMemory;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22187..22190),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22195..22235),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut s = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22240..22243),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22248..22295),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert!(s.try_reserve_exact(1024).is_ok());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22300..22335),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert_eq!(s.capacity(), 1024);",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22340..22343),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22348..22377),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let el_count: usize = 42;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22382..22439),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let el_size: usize = 288230376151711744; // bad read?",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22444..22447),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22452..22489),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let mut required_size: usize = 0;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22494..22520),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " for i in 0..el_count {",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22525..22558),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     required_size += el_size;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22563..22568),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " }",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22573..22630),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " assert!(s.try_reserve_exact(required_size).is_err());",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22635..22642),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: try_reserve_exact,
                            span: bytes(22654..22671),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(22686..22690),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: capacity,
                                            span: bytes(22700..22708),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(22710..22715),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                            Comma,
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Result,
                                                span: bytes(22726..22732),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Option,
                                                                            span: bytes(22733..22739),
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: None,
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: MemoryBase,
                                                                                                        span: bytes(22740..22750),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryError,
                                                                            span: bytes(22753..22764),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Binary {
                                        attrs: [],
                                        left: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: capacity,
                                                            span: bytes(22779..22787),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        op: BinOp::Eq(
                                            EqEq,
                                        ),
                                        right: Expr::Lit {
                                            attrs: [],
                                            lit: Lit::Int {
                                                token: 0,
                                            },
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Return {
                                                    attrs: [],
                                                    return_token: Return,
                                                    expr: Some(
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Ok,
                                                                                span: bytes(22814..22816),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: None,
                                                                                    span: bytes(22817..22821),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                                Some(
                                                    Semi,
                                                ),
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                None,
                            ),
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: self,
                                                        span: bytes(22842..22846),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: ensure_free_section,
                                        span: bytes(22847..22866),
                                    },
                                    turbofish: Some(
                                        AngleBracketedGenericArguments {
                                            colon2_token: Some(
                                                PathSep,
                                            ),
                                            lt_token: Lt,
                                            args: [
                                                GenericArgument::Const(
                                                    Expr::Lit {
                                                        attrs: [],
                                                        lit: Lit::Bool {
                                                            value: true,
                                                        },
                                                    },
                                                ),
                                            ],
                                            gt_token: Gt,
                                        },
                                    ),
                                    paren_token: Paren,
                                    args: [
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: capacity,
                                                            span: bytes(22875..22883),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        Comma,
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: None,
                                                            span: bytes(22885..22889),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22902..22977),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Grows the underlying memory to ensure container has a free segment that",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(22982..23027),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " can store a value with provided `layout`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23032..23104),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This function might allocate more than requested amount of memory to",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23109..23144),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " reduce number of reallocations.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23149..23152),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23157..23228),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`BasePtr`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23233..23305),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(BasePtr))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23310..23335),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23340..23343),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23348..23415),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " After calling this function, new capacity will be greater than:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23420..23465),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `self.size() + padding + size_of::<V>()`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23470..23473),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23478..23490),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23495..23498),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23503..23575),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if attempting to grow the container to a capacity larger than",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(23580..23645),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `isize::MAX` or the allocator can't allocate required memory.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: inline,
                                            span: bytes(23652..23658),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: reserve_layout,
                            span: bytes(23671..23685),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(23691..23695),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: layout,
                                            span: bytes(23697..23703),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::ImplTrait {
                                        impl_token: Impl,
                                        bounds: [
                                            TypeParamBound::Trait(
                                                TraitBound {
                                                    paren_token: None,
                                                    modifier: TraitBoundModifier::None,
                                                    lifetimes: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: HasLayout,
                                                                    span: bytes(23710..23719),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Option,
                                                span: bytes(23724..23730),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryBase,
                                                                            span: bytes(23731..23741),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Match {
                                    attrs: [],
                                    match_token: Match,
                                    expr: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(23759..23763),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: try_reserve_layout,
                                            span: bytes(23764..23782),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [
                                            Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: layout,
                                                                span: bytes(23783..23789),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                    brace_token: Brace,
                                    arms: [
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Ok,
                                                                span: bytes(23805..23807),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: it,
                                                            span: bytes(23808..23810),
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: it,
                                                                span: bytes(23815..23817),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(23831..23834),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(23835..23846),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: TooLarge,
                                                                        span: bytes(23848..23856),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(23861..23866),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "new capacity exceeds `isize::MAX`",
                                                            span: bytes(23868..23903),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(23918..23921),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::TupleStruct {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(23922..23933),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Allocator,
                                                                        span: bytes(23935..23944),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        paren_token: Paren,
                                                        elems: [
                                                            Pat::Wild {
                                                                attrs: [],
                                                                underscore_token: Underscore,
                                                            },
                                                        ],
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(23952..23957),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "unable to allocate more memory",
                                                            span: bytes(23959..23991),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24015..24085),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Tries growing the underlying memory to ensure container has a free",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24090..24148),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " segment that can store a value with provided `layout`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24153..24225),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This function might allocate more than requested amount of memory to",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24230..24265),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " reduce number of reallocations.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24270..24273),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24278..24349),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`BasePtr`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24354..24426),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(BasePtr))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24431..24456),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24461..24464),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24469..24539),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the new capacity exceeds `isize::MAX` or the allocator couldn't",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24544..24604),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " allocate required memory, a [`MemoryError`] is returned.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24609..24612),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24617..24684),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " After calling this function, new capacity will be greater than:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(24689..24734),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `self.size() + padding + size_of::<V>()`.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: try_reserve_layout,
                            span: bytes(24746..24764),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(24779..24783),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: layout,
                                            span: bytes(24793..24799),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::ImplTrait {
                                        impl_token: Impl,
                                        bounds: [
                                            TypeParamBound::Trait(
                                                TraitBound {
                                                    paren_token: None,
                                                    modifier: TraitBoundModifier::None,
                                                    lifetimes: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: HasLayout,
                                                                    span: bytes(24806..24815),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            Comma,
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Result,
                                                span: bytes(24826..24832),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Option,
                                                                            span: bytes(24833..24839),
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: None,
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: MemoryBase,
                                                                                                        span: bytes(24840..24850),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryError,
                                                                            span: bytes(24853..24864),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: layout,
                                        span: bytes(24880..24886),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: layout,
                                                                span: bytes(24889..24895),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: as_layout,
                                                span: bytes(24896..24905),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Binary {
                                        attrs: [],
                                        left: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: layout,
                                                                span: bytes(24920..24926),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: size,
                                                span: bytes(24927..24931),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        op: BinOp::Eq(
                                            EqEq,
                                        ),
                                        right: Expr::Lit {
                                            attrs: [],
                                            lit: Lit::Int {
                                                token: 0,
                                            },
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Return {
                                                    attrs: [],
                                                    return_token: Return,
                                                    expr: Some(
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Ok,
                                                                                span: bytes(24960..24962),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: None,
                                                                                    span: bytes(24963..24967),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                                Some(
                                                    Semi,
                                                ),
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                None,
                            ),
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: self,
                                                        span: bytes(24988..24992),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: ensure_free_section,
                                        span: bytes(24993..25012),
                                    },
                                    turbofish: Some(
                                        AngleBracketedGenericArguments {
                                            colon2_token: Some(
                                                PathSep,
                                            ),
                                            lt_token: Lt,
                                            args: [
                                                GenericArgument::Const(
                                                    Expr::Lit {
                                                        attrs: [],
                                                        lit: Lit::Bool {
                                                            value: false,
                                                        },
                                                    },
                                                ),
                                            ],
                                            gt_token: Gt,
                                        },
                                    ),
                                    paren_token: Paren,
                                    args: [
                                        Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: layout,
                                                                span: bytes(25022..25028),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: size,
                                                span: bytes(25029..25033),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        Comma,
                                        Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Some,
                                                                span: bytes(25037..25041),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: layout,
                                                                        span: bytes(25042..25048),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: align,
                                                        span: bytes(25049..25054),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [],
                                                },
                                            ],
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25070..25145),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Grows the underlying memory to ensure container has a free segment that",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25150..25195),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " can store a value with provided `layout`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25200..25203),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25208..25279),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`BasePtr`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25284..25356),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(BasePtr))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25361..25386),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25391..25394),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25399..25462),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " After calling this function, new capacity will be equal to:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25467..25512),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `self.size() + padding + size_of::<V>()`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25517..25520),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25525..25537),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25542..25545),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25550..25622),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if attempting to grow the container to a capacity larger than",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(25627..25692),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `isize::MAX` or the allocator can't allocate required memory.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident {
                                            sym: inline,
                                            span: bytes(25699..25705),
                                        },
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: reserve_layout_exact,
                            span: bytes(25718..25738),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(25744..25748),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: layout,
                                            span: bytes(25750..25756),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::ImplTrait {
                                        impl_token: Impl,
                                        bounds: [
                                            TypeParamBound::Trait(
                                                TraitBound {
                                                    paren_token: None,
                                                    modifier: TraitBoundModifier::None,
                                                    lifetimes: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: HasLayout,
                                                                    span: bytes(25763..25772),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Option,
                                                span: bytes(25777..25783),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryBase,
                                                                            span: bytes(25784..25794),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Match {
                                    attrs: [],
                                    match_token: Match,
                                    expr: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(25812..25816),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: try_reserve_layout_exact,
                                            span: bytes(25817..25841),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [
                                            Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: layout,
                                                                span: bytes(25842..25848),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                    brace_token: Brace,
                                    arms: [
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Ok,
                                                                span: bytes(25864..25866),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: it,
                                                            span: bytes(25867..25869),
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: it,
                                                                span: bytes(25874..25876),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(25890..25893),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(25894..25905),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: TooLarge,
                                                                        span: bytes(25907..25915),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(25920..25925),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "new capacity exceeds `isize::MAX`",
                                                            span: bytes(25927..25962),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Err,
                                                                span: bytes(25977..25980),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::TupleStruct {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: MemoryError,
                                                                        span: bytes(25981..25992),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Allocator,
                                                                        span: bytes(25994..26003),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        paren_token: Paren,
                                                        elems: [
                                                            Pat::Wild {
                                                                attrs: [],
                                                                underscore_token: Underscore,
                                                            },
                                                        ],
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Macro {
                                                attrs: [],
                                                mac: Macro {
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: panic,
                                                                    span: bytes(26011..26016),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    bang_token: Not,
                                                    delimiter: MacroDelimiter::Paren(
                                                        Paren,
                                                    ),
                                                    tokens: TokenStream [
                                                        Literal {
                                                            lit: "unable to allocate more memory",
                                                            span: bytes(26018..26050),
                                                        },
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26074..26144),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Tries growing the underlying memory to ensure container has a free",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26149..26207),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " segment that can store a value with provided `layout`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26212..26215),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26220..26291),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the base address changed due to reallocation, new [`BasePtr`] is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26296..26368),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned as `Ok(Some(BasePtr))`, if base address stayed the same the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26373..26398),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " result is `Ok(None)`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26403..26406),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26411..26481),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If the new capacity exceeds `isize::MAX` or the allocator couldn't",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26486..26546),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " allocate required memory, a [`MemoryError`] is returned.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26551..26554),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26559..26622),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " After calling this function, new capacity will be equal to:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(26627..26671),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `self.size() + padding + layout.size()`.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: try_reserve_layout_exact,
                            span: bytes(26683..26707),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(26722..26726),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: layout,
                                            span: bytes(26736..26742),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::ImplTrait {
                                        impl_token: Impl,
                                        bounds: [
                                            TypeParamBound::Trait(
                                                TraitBound {
                                                    paren_token: None,
                                                    modifier: TraitBoundModifier::None,
                                                    lifetimes: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: HasLayout,
                                                                    span: bytes(26749..26758),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ),
                                        ],
                                    },
                                },
                            ),
                            Comma,
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Result,
                                                span: bytes(26769..26775),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Option,
                                                                            span: bytes(26776..26782),
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: None,
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: MemoryBase,
                                                                                                        span: bytes(26783..26793),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                    Comma,
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: MemoryError,
                                                                            span: bytes(26796..26807),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: layout,
                                        span: bytes(26823..26829),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: layout,
                                                                span: bytes(26832..26838),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: as_layout,
                                                span: bytes(26839..26848),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Binary {
                                        attrs: [],
                                        left: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: layout,
                                                                span: bytes(26863..26869),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: size,
                                                span: bytes(26870..26874),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        op: BinOp::Eq(
                                            EqEq,
                                        ),
                                        right: Expr::Lit {
                                            attrs: [],
                                            lit: Lit::Int {
                                                token: 0,
                                            },
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Return {
                                                    attrs: [],
                                                    return_token: Return,
                                                    expr: Some(
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Ok,
                                                                                span: bytes(26903..26905),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: None,
                                                                                    span: bytes(26906..26910),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    ),
                                                },
                                                Some(
                                                    Semi,
                                                ),
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                None,
                            ),
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: self,
                                                        span: bytes(26931..26935),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: ensure_free_section,
                                        span: bytes(26936..26955),
                                    },
                                    turbofish: Some(
                                        AngleBracketedGenericArguments {
                                            colon2_token: Some(
                                                PathSep,
                                            ),
                                            lt_token: Lt,
                                            args: [
                                                GenericArgument::Const(
                                                    Expr::Lit {
                                                        attrs: [],
                                                        lit: Lit::Bool {
                                                            value: true,
                                                        },
                                                    },
                                                ),
                                            ],
                                            gt_token: Gt,
                                        },
                                    ),
                                    paren_token: Paren,
                                    args: [
                                        Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: layout,
                                                                span: bytes(26964..26970),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: size,
                                                span: bytes(26971..26975),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        Comma,
                                        Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Some,
                                                                span: bytes(26979..26983),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: layout,
                                                                        span: bytes(26984..26990),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: align,
                                                        span: bytes(26991..26996),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [],
                                                },
                                            ],
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(27012..27085),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Shrinks the capacity with a lower bound and returns the base pointer.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(27090..27093),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(27098..27110),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(27115..27118),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(27123..27193),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if the allocator wasn't able to shrink the allocated memory",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(27198..27209),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " region.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: shrink_to,
                            span: bytes(27221..27230),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(27236..27240),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: new_capacity,
                                            span: bytes(27242..27254),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(27256..27261),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: MemoryBase,
                                                span: bytes(27266..27276),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: Some(
                                        Mut,
                                    ),
                                    ident: Ident {
                                        sym: tracker,
                                        span: bytes(27295..27302),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Call {
                                                attrs: [],
                                                func: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: WritableInner,
                                                                    span: bytes(27317..27330),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: write_named,
                                                                    span: bytes(27332..27343),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                paren_token: Paren,
                                                args: [
                                                    Expr::Reference {
                                                        attrs: [],
                                                        and_token: And,
                                                        mutability: None,
                                                        expr: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: self,
                                                                                    span: bytes(27345..27349),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: inner,
                                                                        span: bytes(27350..27355),
                                                                    },
                                                                ),
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: tracker,
                                                                    span: bytes(27356..27363),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                    Comma,
                                                    Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: LockTarget,
                                                                        span: bytes(27365..27375),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: SegmentTracker,
                                                                        span: bytes(27377..27391),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: unwrap,
                                                span: bytes(27393..27399),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: new_capacity,
                                        span: bytes(27415..27427),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: tracker,
                                                                span: bytes(27430..27437),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: shrink,
                                                span: bytes(27438..27444),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: new_capacity,
                                                                    span: bytes(27445..27457),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: Some(
                                        Mut,
                                    ),
                                    ident: Ident {
                                        sym: base,
                                        span: bytes(27476..27480),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Call {
                                                attrs: [],
                                                func: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: WritableInner,
                                                                    span: bytes(27495..27508),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: write_named,
                                                                    span: bytes(27510..27521),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                paren_token: Paren,
                                                args: [
                                                    Expr::Reference {
                                                        attrs: [],
                                                        and_token: And,
                                                        mutability: None,
                                                        expr: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: self,
                                                                                    span: bytes(27523..27527),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: inner,
                                                                        span: bytes(27528..27533),
                                                                    },
                                                                ),
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: base,
                                                                    span: bytes(27534..27538),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                    Comma,
                                                    Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: LockTarget,
                                                                        span: bytes(27540..27550),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: BaseAddress,
                                                                        span: bytes(27552..27563),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: unwrap,
                                                span: bytes(27565..27571),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: old_layout,
                                        span: bytes(27588..27598),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: self,
                                                                span: bytes(27601..27605),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: layout,
                                                span: bytes(27606..27612),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::If {
                                    attrs: [],
                                    if_token: If,
                                    cond: Expr::Binary {
                                        attrs: [],
                                        left: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: new_capacity,
                                                            span: bytes(27627..27639),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        op: BinOp::Eq(
                                            EqEq,
                                        ),
                                        right: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: old_layout,
                                                                span: bytes(27643..27653),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: size,
                                                span: bytes(27654..27658),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                    },
                                    then_branch: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::Return {
                                                    attrs: [],
                                                    return_token: Return,
                                                    expr: Some(
                                                        Expr::Unary {
                                                            attrs: [],
                                                            op: UnOp::Deref(
                                                                Star,
                                                            ),
                                                            expr: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: base,
                                                                                span: bytes(27683..27687),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        },
                                                    ),
                                                },
                                                Some(
                                                    Semi,
                                                ),
                                            ),
                                        ],
                                    },
                                    else_branch: None,
                                },
                                None,
                            ),
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: new_layout,
                                        span: bytes(27711..27721),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Unsafe {
                                            attrs: [],
                                            unsafe_token: Unsafe,
                                            block: Block {
                                                brace_token: Brace,
                                                stmts: [
                                                    Stmt::Expr(
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Layout,
                                                                                span: bytes(27917..27923),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: from_size_align_unchecked,
                                                                                span: bytes(27925..27950),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: new_capacity,
                                                                                    span: bytes(27951..27963),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                Comma,
                                                                Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: old_layout,
                                                                                        span: bytes(27965..27975),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: align,
                                                                        span: bytes(27976..27981),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                            ],
                                                        },
                                                        None,
                                                    ),
                                                ],
                                            },
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::Assign {
                                    attrs: [],
                                    left: Expr::Field {
                                        attrs: [],
                                        base: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: base,
                                                            span: bytes(28005..28009),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        member: Member::Named(
                                            Ident {
                                                sym: address,
                                                span: bytes(28010..28017),
                                            },
                                        ),
                                    },
                                    eq_token: Eq,
                                    right: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Unsafe {
                                            attrs: [],
                                            unsafe_token: Unsafe,
                                            block: Block {
                                                brace_token: Brace,
                                                stmts: [
                                                    Stmt::Expr(
                                                        Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Field {
                                                                    attrs: [],
                                                                    base: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: self,
                                                                                        span: bytes(28041..28045),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    member: Member::Named(
                                                                        Ident {
                                                                            sym: inner,
                                                                            span: bytes(28046..28051),
                                                                        },
                                                                    ),
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: alloc,
                                                                        span: bytes(28069..28074),
                                                                    },
                                                                ),
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: shrink,
                                                                span: bytes(28092..28098),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Field {
                                                                    attrs: [],
                                                                    base: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: base,
                                                                                        span: bytes(28099..28103),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    member: Member::Named(
                                                                        Ident {
                                                                            sym: address,
                                                                            span: bytes(28104..28111),
                                                                        },
                                                                    ),
                                                                },
                                                                Comma,
                                                                Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: self,
                                                                                        span: bytes(28113..28117),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: layout,
                                                                        span: bytes(28118..28124),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                                Comma,
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: new_layout,
                                                                                    span: bytes(28128..28138),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                        None,
                                                    ),
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: expect,
                                            span: bytes(28159..28165),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [
                                            Expr::Lit {
                                                attrs: [],
                                                lit: Lit::Str {
                                                    token: "unable to shrink the container",
                                                },
                                            },
                                        ],
                                    },
                                },
                                Some(
                                    Semi,
                                ),
                            ),
                            Stmt::Expr(
                                Expr::Unary {
                                    attrs: [],
                                    op: UnOp::Deref(
                                        Star,
                                    ),
                                    expr: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: base,
                                                        span: bytes(28211..28215),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(28227..28300),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Shrinks the capacity to fit the currently stored data and returns the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(28305..28322),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " base pointer.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: shrink_to_fit,
                            span: bytes(28334..28347),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(28353..28357),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: MemoryBase,
                                                span: bytes(28362..28372),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: Some(
                                        Mut,
                                    ),
                                    ident: Ident {
                                        sym: base,
                                        span: bytes(28391..28395),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Call {
                                                attrs: [],
                                                func: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: WritableInner,
                                                                    span: bytes(28410..28423),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: write_named,
                                                                    span: bytes(28425..28436),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                paren_token: Paren,
                                                args: [
                                                    Expr::Reference {
                                                        attrs: [],
                                                        and_token: And,
                                                        mutability: None,
                                                        expr: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: self,
                                                                                    span: bytes(28438..28442),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: inner,
                                                                        span: bytes(28443..28448),
                                                                    },
                                                                ),
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: base,
                                                                    span: bytes(28449..28453),
                                                                },
                                                            ),
                                                        },
                                                    },
                                                    Comma,
                                                    Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: LockTarget,
                                                                        span: bytes(28455..28465),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: BaseAddress,
                                                                        span: bytes(28467..28478),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: unwrap,
                                                span: bytes(28480..28486),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: new_capacity,
                                        span: bytes(28502..28514),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Match {
                                            attrs: [],
                                            match_token: Match,
                                            expr: Expr::MethodCall {
                                                attrs: [],
                                                receiver: Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Call {
                                                        attrs: [],
                                                        func: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: WritableInner,
                                                                            span: bytes(28535..28548),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                    PathSep,
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: write_named,
                                                                            span: bytes(28550..28561),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        paren_token: Paren,
                                                        args: [
                                                            Expr::Reference {
                                                                attrs: [],
                                                                and_token: And,
                                                                mutability: None,
                                                                expr: Expr::Field {
                                                                    attrs: [],
                                                                    base: Expr::Field {
                                                                        attrs: [],
                                                                        base: Expr::Path {
                                                                            attrs: [],
                                                                            qself: None,
                                                                            path: Path {
                                                                                leading_colon: None,
                                                                                segments: [
                                                                                    PathSegment {
                                                                                        ident: Ident {
                                                                                            sym: self,
                                                                                            span: bytes(28563..28567),
                                                                                        },
                                                                                        arguments: PathArguments::None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                        dot_token: Dot,
                                                                        member: Member::Named(
                                                                            Ident {
                                                                                sym: inner,
                                                                                span: bytes(28568..28573),
                                                                            },
                                                                        ),
                                                                    },
                                                                    dot_token: Dot,
                                                                    member: Member::Named(
                                                                        Ident {
                                                                            sym: tracker,
                                                                            span: bytes(28574..28581),
                                                                        },
                                                                    ),
                                                                },
                                                            },
                                                            Comma,
                                                            Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: LockTarget,
                                                                                span: bytes(28583..28593),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: SegmentTracker,
                                                                                span: bytes(28595..28609),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: unwrap,
                                                        span: bytes(28628..28634),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [],
                                                },
                                                dot_token: Dot,
                                                method: Ident {
                                                    sym: shrink_to_fit,
                                                    span: bytes(28654..28667),
                                                },
                                                turbofish: None,
                                                paren_token: Paren,
                                                args: [],
                                            },
                                            brace_token: Brace,
                                            arms: [
                                                Arm {
                                                    attrs: [],
                                                    pat: Pat::TupleStruct {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: Some,
                                                                        span: bytes(28700..28704),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                        paren_token: Paren,
                                                        elems: [
                                                            Pat::Ident {
                                                                attrs: [],
                                                                by_ref: None,
                                                                mutability: None,
                                                                ident: Ident {
                                                                    sym: it,
                                                                    span: bytes(28705..28707),
                                                                },
                                                                subpat: None,
                                                            },
                                                        ],
                                                    },
                                                    guard: None,
                                                    fat_arrow_token: FatArrow,
                                                    body: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: it,
                                                                        span: bytes(28712..28714),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    comma: Some(
                                                        Comma,
                                                    ),
                                                },
                                                Arm {
                                                    attrs: [],
                                                    pat: Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: None,
                                                            span: bytes(28732..28736),
                                                        },
                                                        subpat: None,
                                                    },
                                                    guard: None,
                                                    fat_arrow_token: FatArrow,
                                                    body: Expr::Return {
                                                        attrs: [],
                                                        return_token: Return,
                                                        expr: Some(
                                                            Expr::Unary {
                                                                attrs: [],
                                                                op: UnOp::Deref(
                                                                    Star,
                                                                ),
                                                                expr: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: base,
                                                                                    span: bytes(28748..28752),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            },
                                                        ),
                                                    },
                                                    comma: Some(
                                                        Comma,
                                                    ),
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: old_layout,
                                        span: bytes(28781..28791),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: self,
                                                                span: bytes(28794..28798),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: layout,
                                                span: bytes(28799..28805),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: new_layout,
                                        span: bytes(28821..28831),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Unsafe {
                                            attrs: [],
                                            unsafe_token: Unsafe,
                                            block: Block {
                                                brace_token: Brace,
                                                stmts: [
                                                    Stmt::Expr(
                                                        Expr::Call {
                                                            attrs: [],
                                                            func: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: Layout,
                                                                                span: bytes(29027..29033),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                        PathSep,
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: from_size_align_unchecked,
                                                                                span: bytes(29035..29060),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: new_capacity,
                                                                                    span: bytes(29061..29073),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                Comma,
                                                                Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: old_layout,
                                                                                        span: bytes(29075..29085),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: align,
                                                                        span: bytes(29086..29091),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                            ],
                                                        },
                                                        None,
                                                    ),
                                                ],
                                            },
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::Assign {
                                    attrs: [],
                                    left: Expr::Field {
                                        attrs: [],
                                        base: Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: base,
                                                            span: bytes(29114..29118),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        member: Member::Named(
                                            Ident {
                                                sym: address,
                                                span: bytes(29119..29126),
                                            },
                                        ),
                                    },
                                    eq_token: Eq,
                                    right: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Unsafe {
                                            attrs: [],
                                            unsafe_token: Unsafe,
                                            block: Block {
                                                brace_token: Brace,
                                                stmts: [
                                                    Stmt::Expr(
                                                        Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::Field {
                                                                attrs: [],
                                                                base: Expr::Field {
                                                                    attrs: [],
                                                                    base: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: self,
                                                                                        span: bytes(29150..29154),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    member: Member::Named(
                                                                        Ident {
                                                                            sym: inner,
                                                                            span: bytes(29155..29160),
                                                                        },
                                                                    ),
                                                                },
                                                                dot_token: Dot,
                                                                member: Member::Named(
                                                                    Ident {
                                                                        sym: alloc,
                                                                        span: bytes(29178..29183),
                                                                    },
                                                                ),
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: shrink,
                                                                span: bytes(29201..29207),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [
                                                                Expr::Field {
                                                                    attrs: [],
                                                                    base: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: base,
                                                                                        span: bytes(29208..29212),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    member: Member::Named(
                                                                        Ident {
                                                                            sym: address,
                                                                            span: bytes(29213..29220),
                                                                        },
                                                                    ),
                                                                },
                                                                Comma,
                                                                Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: self,
                                                                                        span: bytes(29222..29226),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: layout,
                                                                        span: bytes(29227..29233),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                                Comma,
                                                                Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: new_layout,
                                                                                    span: bytes(29237..29247),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                        None,
                                                    ),
                                                ],
                                            },
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: expect,
                                            span: bytes(29268..29274),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [
                                            Expr::Lit {
                                                attrs: [],
                                                lit: Lit::Str {
                                                    token: "unable to shrink the container",
                                                },
                                            },
                                        ],
                                    },
                                },
                                Some(
                                    Semi,
                                ),
                            ),
                            Stmt::Expr(
                                Expr::Unary {
                                    attrs: [],
                                    op: UnOp::Deref(
                                        Star,
                                    ),
                                    expr: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: base,
                                                        span: bytes(29320..29324),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29336..29411),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Stores a `value` of type `T` in the contiguous memory block and returns",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29416..29462),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " a [`reference`](ContiguousEntryRef) to it.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29467..29470),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29475..29542),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Value type argument `T` is used to infer type size and returned",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29547..29579),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " reference dropping behavior.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29584..29587),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29592..29604),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29609..29612),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29617..29684),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if the collection needs to grow and new capacity exceeds",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(29689..29753),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `isize::MAX` bytes or allocation of additional memory fails.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: push,
                            span: bytes(29765..29769),
                        },
                        generics: Generics {
                            lt_token: Some(
                                Lt,
                            ),
                            params: [
                                GenericParam::Type(
                                    TypeParam {
                                        attrs: [],
                                        ident: Ident {
                                            sym: T,
                                            span: bytes(29770..29771),
                                        },
                                        colon_token: None,
                                        bounds: [],
                                        eq_token: None,
                                        default: None,
                                    },
                                ),
                            ],
                            gt_token: Some(
                                Gt,
                            ),
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(29778..29782),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: value,
                                            span: bytes(29784..29789),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: T,
                                                        span: bytes(29791..29792),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Impl,
                                                span: bytes(29797..29801),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: PushResult,
                                                span: bytes(29803..29813),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: T,
                                                                            span: bytes(29814..29815),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: Some(
                                        Mut,
                                    ),
                                    ident: Ident {
                                        sym: data,
                                        span: bytes(29835..29839),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: ManuallyDrop,
                                                                span: bytes(29842..29854),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: new,
                                                                span: bytes(29856..29859),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: value,
                                                                    span: bytes(29860..29865),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: layout,
                                        span: bytes(29880..29886),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Layout,
                                                                span: bytes(29889..29895),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: for_value,
                                                                span: bytes(29897..29906),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Reference {
                                                    attrs: [],
                                                    and_token: And,
                                                    mutability: None,
                                                    expr: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: data,
                                                                        span: bytes(29908..29912),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: pos,
                                        span: bytes(29927..29930),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Cast {
                                            attrs: [],
                                            expr: Expr::Reference {
                                                attrs: [],
                                                and_token: And,
                                                mutability: Some(
                                                    Mut,
                                                ),
                                                expr: Expr::Unary {
                                                    attrs: [],
                                                    op: UnOp::Deref(
                                                        Star,
                                                    ),
                                                    expr: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: data,
                                                                        span: bytes(29939..29943),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                },
                                            },
                                            as_token: As,
                                            ty: Type::Ptr {
                                                star_token: Star,
                                                const_token: None,
                                                mutability: Some(
                                                    Mut,
                                                ),
                                                elem: Type::Path {
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: T,
                                                                    span: bytes(29952..29953),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            },
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::Unsafe {
                                    attrs: [],
                                    unsafe_token: Unsafe,
                                    block: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: self,
                                                                        span: bytes(29973..29977),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: push_raw,
                                                        span: bytes(29978..29986),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: pos,
                                                                            span: bytes(29987..29990),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        Comma,
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: layout,
                                                                            span: bytes(29992..29998),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30013..30088),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Stores a `value` of type `T` in the contiguous memory block and returns",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30093..30165),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " a reference to it which doesn't mark the memory segment as free when",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30170..30182),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " dropped.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30187..30190),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30195..30242),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " See [`ContiguousMemory::push`] for details.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30247..30250),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30255..30267),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30272..30275),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30280..30347),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if the collection needs to grow and new capacity exceeds",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30352..30416),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `isize::MAX` bytes or allocation of additional memory fails.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: push_persisted,
                            span: bytes(30428..30442),
                        },
                        generics: Generics {
                            lt_token: Some(
                                Lt,
                            ),
                            params: [
                                GenericParam::Type(
                                    TypeParam {
                                        attrs: [],
                                        ident: Ident {
                                            sym: T,
                                            span: bytes(30443..30444),
                                        },
                                        colon_token: None,
                                        bounds: [],
                                        eq_token: None,
                                        default: None,
                                    },
                                ),
                            ],
                            gt_token: Some(
                                Gt,
                            ),
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(30451..30455),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: value,
                                            span: bytes(30457..30462),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: T,
                                                        span: bytes(30464..30465),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Impl,
                                                span: bytes(30470..30474),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: PushResult,
                                                span: bytes(30476..30486),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: T,
                                                                            span: bytes(30487..30488),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: Some(
                                        Mut,
                                    ),
                                    ident: Ident {
                                        sym: data,
                                        span: bytes(30508..30512),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: ManuallyDrop,
                                                                span: bytes(30515..30527),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: new,
                                                                span: bytes(30529..30532),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: value,
                                                                    span: bytes(30533..30538),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: layout,
                                        span: bytes(30553..30559),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Layout,
                                                                span: bytes(30562..30568),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: for_value,
                                                                span: bytes(30570..30579),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Reference {
                                                    attrs: [],
                                                    and_token: And,
                                                    mutability: None,
                                                    expr: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: data,
                                                                        span: bytes(30581..30585),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: pos,
                                        span: bytes(30600..30603),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Cast {
                                            attrs: [],
                                            expr: Expr::Reference {
                                                attrs: [],
                                                and_token: And,
                                                mutability: Some(
                                                    Mut,
                                                ),
                                                expr: Expr::Unary {
                                                    attrs: [],
                                                    op: UnOp::Deref(
                                                        Star,
                                                    ),
                                                    expr: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: data,
                                                                        span: bytes(30612..30616),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                },
                                            },
                                            as_token: As,
                                            ty: Type::Ptr {
                                                star_token: Star,
                                                const_token: None,
                                                mutability: Some(
                                                    Mut,
                                                ),
                                                elem: Type::Path {
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: T,
                                                                    span: bytes(30625..30626),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            },
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::Unsafe {
                                    attrs: [],
                                    unsafe_token: Unsafe,
                                    block: Block {
                                        brace_token: Brace,
                                        stmts: [
                                            Stmt::Expr(
                                                Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: self,
                                                                        span: bytes(30646..30650),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: push_raw_persisted,
                                                        span: bytes(30651..30669),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: pos,
                                                                            span: bytes(30670..30673),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        Comma,
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: layout,
                                                                            span: bytes(30675..30681),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                                None,
                                            ),
                                        ],
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30696..30765),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Works same as [`push`](ContiguousMemory::push) but takes a `data`",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30770..30795),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " pointer and `layout`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30800..30803),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30808..30879),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Pointer type `T` is used to infer the drop behavior of the returned",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30884..30898),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " reference.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30903..30906),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30911..30923),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30928..30931),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(30936..31003),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if the collection needs to grow and new capacity exceeds",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31008..31072),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `isize::MAX` bytes or allocation of additional memory fails.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31077..31080),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31085..31097),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Safety",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31102..31105),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31110..31184),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This function is unsafe because it clones memory from provided pointer",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31189..31258),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " which means it could cause a segmentation fault if the pointer is",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31263..31275),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " invalid.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31280..31283),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31288..31361),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Further, it also allows escaping type drop glue because it takes type",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31366..31404),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " [`Layout`] as a separate argument.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31409..31412),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31417..31431),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Examples",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31436..31439),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31444..31520),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Disabling drop handling by casting the provided pointer into `*const ()`",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31525..31593),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " type and then calling [`transmute`](core::mem::transmute) on the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31598..31621),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned reference:",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31626..31633),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31638..31666),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # use contiguous_mem::*;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31671..31726),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # use contiguous_mem::memory::DefaultMemoryManager;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31731..31761),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # use core::alloc::Layout;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31766..31786),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # use core::mem;",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31791..31839),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # let mut storage = ContiguousMemory::new();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31844..31896),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let value = vec![\"ignore\", \"drop\", \"for\", \"me\"];",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31901..31958),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let erased = &value as *const Vec<&str> as *const ();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(31963..32007),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let layout = Layout::new::<Vec<&str>>();",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(32012..32015),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(32020..32076),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " // Reference type arguments must be fully specified.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(32081..32146),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " let stored: CERef<Vec<&str>, DefaultMemoryManager> = unsafe {",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(32151..32207),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "     mem::transmute(storage.push_raw(erased, layout))",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(32212..32218),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " };",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(32223..32230),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ```",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: Some(
                            Unsafe,
                        ),
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: push_raw,
                            span: bytes(32249..32257),
                        },
                        generics: Generics {
                            lt_token: Some(
                                Lt,
                            ),
                            params: [
                                GenericParam::Type(
                                    TypeParam {
                                        attrs: [],
                                        ident: Ident {
                                            sym: T,
                                            span: bytes(32258..32259),
                                        },
                                        colon_token: None,
                                        bounds: [],
                                        eq_token: None,
                                        default: None,
                                    },
                                ),
                            ],
                            gt_token: Some(
                                Gt,
                            ),
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(32266..32270),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: data,
                                            span: bytes(32272..32276),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Ptr {
                                        star_token: Star,
                                        const_token: Some(
                                            Const,
                                        ),
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: T,
                                                            span: bytes(32285..32286),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: layout,
                                            span: bytes(32288..32294),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Layout,
                                                        span: bytes(32296..32302),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Impl,
                                                span: bytes(32307..32311),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: PushResult,
                                                span: bytes(32313..32323),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: T,
                                                                            span: bytes(32324..32325),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: range,
                                        span: bytes(32341..32346),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Loop {
                                            attrs: [],
                                            label: None,
                                            loop_token: Loop,
                                            body: Block {
                                                brace_token: Brace,
                                                stmts: [
                                                    Stmt::Local {
                                                        attrs: [],
                                                        let_token: Let,
                                                        pat: Pat::Ident {
                                                            attrs: [],
                                                            by_ref: None,
                                                            mutability: None,
                                                            ident: Ident {
                                                                sym: base,
                                                                span: bytes(32372..32376),
                                                            },
                                                            subpat: None,
                                                        },
                                                        init: Some(
                                                            LocalInit {
                                                                eq_token: Eq,
                                                                expr: Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::Path {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: self,
                                                                                        span: bytes(32379..32383),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: base,
                                                                        span: bytes(32384..32388),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [],
                                                                },
                                                                diverge: None,
                                                            },
                                                        ),
                                                        semi_token: Semi,
                                                    },
                                                    Stmt::Local {
                                                        attrs: [],
                                                        let_token: Let,
                                                        pat: Pat::Ident {
                                                            attrs: [],
                                                            by_ref: None,
                                                            mutability: None,
                                                            ident: Ident {
                                                                sym: next,
                                                                span: bytes(32408..32412),
                                                            },
                                                            subpat: None,
                                                        },
                                                        init: Some(
                                                            LocalInit {
                                                                eq_token: Eq,
                                                                expr: Expr::MethodCall {
                                                                    attrs: [],
                                                                    receiver: Expr::MethodCall {
                                                                        attrs: [],
                                                                        receiver: Expr::Call {
                                                                            attrs: [],
                                                                            func: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: WritableInner,
                                                                                                span: bytes(32415..32428),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                        PathSep,
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: write_named,
                                                                                                span: bytes(32430..32441),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            paren_token: Paren,
                                                                            args: [
                                                                                Expr::Reference {
                                                                                    attrs: [],
                                                                                    and_token: And,
                                                                                    mutability: None,
                                                                                    expr: Expr::Field {
                                                                                        attrs: [],
                                                                                        base: Expr::Field {
                                                                                            attrs: [],
                                                                                            base: Expr::Path {
                                                                                                attrs: [],
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: self,
                                                                                                                span: bytes(32443..32447),
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                            dot_token: Dot,
                                                                                            member: Member::Named(
                                                                                                Ident {
                                                                                                    sym: inner,
                                                                                                    span: bytes(32448..32453),
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                        dot_token: Dot,
                                                                                        member: Member::Named(
                                                                                            Ident {
                                                                                                sym: tracker,
                                                                                                span: bytes(32454..32461),
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                },
                                                                                Comma,
                                                                                Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: LockTarget,
                                                                                                    span: bytes(32463..32473),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                            PathSep,
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: SegmentTracker,
                                                                                                    span: bytes(32475..32489),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ],
                                                                        },
                                                                        dot_token: Dot,
                                                                        method: Ident {
                                                                            sym: unwrap,
                                                                            span: bytes(32508..32514),
                                                                        },
                                                                        turbofish: None,
                                                                        paren_token: Paren,
                                                                        args: [],
                                                                    },
                                                                    dot_token: Dot,
                                                                    method: Ident {
                                                                        sym: take_next,
                                                                        span: bytes(32534..32543),
                                                                    },
                                                                    turbofish: None,
                                                                    paren_token: Paren,
                                                                    args: [
                                                                        Expr::Field {
                                                                            attrs: [],
                                                                            base: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: base,
                                                                                                span: bytes(32544..32548),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            dot_token: Dot,
                                                                            member: Member::Named(
                                                                                Ident {
                                                                                    sym: address,
                                                                                    span: bytes(32549..32556),
                                                                                },
                                                                            ),
                                                                        },
                                                                        Comma,
                                                                        Expr::Path {
                                                                            attrs: [],
                                                                            qself: None,
                                                                            path: Path {
                                                                                leading_colon: None,
                                                                                segments: [
                                                                                    PathSegment {
                                                                                        ident: Ident {
                                                                                            sym: layout,
                                                                                            span: bytes(32558..32564),
                                                                                        },
                                                                                        arguments: PathArguments::None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                                diverge: None,
                                                            },
                                                        ),
                                                        semi_token: Semi,
                                                    },
                                                    Stmt::Expr(
                                                        Expr::Match {
                                                            attrs: [],
                                                            match_token: Match,
                                                            expr: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: next,
                                                                                span: bytes(32586..32590),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            brace_token: Brace,
                                                            arms: [
                                                                Arm {
                                                                    attrs: [],
                                                                    pat: Pat::TupleStruct {
                                                                        attrs: [],
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: Some,
                                                                                        span: bytes(32609..32613),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                        paren_token: Paren,
                                                                        elems: [
                                                                            Pat::Ident {
                                                                                attrs: [],
                                                                                by_ref: None,
                                                                                mutability: None,
                                                                                ident: Ident {
                                                                                    sym: it,
                                                                                    span: bytes(32614..32616),
                                                                                },
                                                                                subpat: None,
                                                                            },
                                                                        ],
                                                                    },
                                                                    guard: None,
                                                                    fat_arrow_token: FatArrow,
                                                                    body: Expr::Block {
                                                                        attrs: [],
                                                                        label: None,
                                                                        block: Block {
                                                                            brace_token: Brace,
                                                                            stmts: [
                                                                                Stmt::Local {
                                                                                    attrs: [],
                                                                                    let_token: Let,
                                                                                    pat: Pat::Ident {
                                                                                        attrs: [],
                                                                                        by_ref: None,
                                                                                        mutability: None,
                                                                                        ident: Ident {
                                                                                            sym: found,
                                                                                            span: bytes(32647..32652),
                                                                                        },
                                                                                        subpat: None,
                                                                                    },
                                                                                    init: Some(
                                                                                        LocalInit {
                                                                                            eq_token: Eq,
                                                                                            expr: Expr::MethodCall {
                                                                                                attrs: [],
                                                                                                receiver: Expr::Path {
                                                                                                    attrs: [],
                                                                                                    qself: None,
                                                                                                    path: Path {
                                                                                                        leading_colon: None,
                                                                                                        segments: [
                                                                                                            PathSegment {
                                                                                                                ident: Ident {
                                                                                                                    sym: it,
                                                                                                                    span: bytes(32655..32657),
                                                                                                                },
                                                                                                                arguments: PathArguments::None,
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                },
                                                                                                dot_token: Dot,
                                                                                                method: Ident {
                                                                                                    sym: offset_base_unwrap,
                                                                                                    span: bytes(32658..32676),
                                                                                                },
                                                                                                turbofish: None,
                                                                                                paren_token: Paren,
                                                                                                args: [
                                                                                                    Expr::Field {
                                                                                                        attrs: [],
                                                                                                        base: Expr::Path {
                                                                                                            attrs: [],
                                                                                                            qself: None,
                                                                                                            path: Path {
                                                                                                                leading_colon: None,
                                                                                                                segments: [
                                                                                                                    PathSegment {
                                                                                                                        ident: Ident {
                                                                                                                            sym: base,
                                                                                                                            span: bytes(32677..32681),
                                                                                                                        },
                                                                                                                        arguments: PathArguments::None,
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        },
                                                                                                        dot_token: Dot,
                                                                                                        member: Member::Named(
                                                                                                            Ident {
                                                                                                                sym: address,
                                                                                                                span: bytes(32682..32689),
                                                                                                            },
                                                                                                        ),
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                            diverge: None,
                                                                                        },
                                                                                    ),
                                                                                    semi_token: Semi,
                                                                                },
                                                                                Stmt::Expr(
                                                                                    Expr::Unsafe {
                                                                                        attrs: [],
                                                                                        unsafe_token: Unsafe,
                                                                                        block: Block {
                                                                                            brace_token: Brace,
                                                                                            stmts: [
                                                                                                Stmt::Expr(
                                                                                                    Expr::Call {
                                                                                                        attrs: [],
                                                                                                        func: Expr::Path {
                                                                                                            attrs: [],
                                                                                                            qself: None,
                                                                                                            path: Path {
                                                                                                                leading_colon: None,
                                                                                                                segments: [
                                                                                                                    PathSegment {
                                                                                                                        ident: Ident {
                                                                                                                            sym: core,
                                                                                                                            span: bytes(32745..32749),
                                                                                                                        },
                                                                                                                        arguments: PathArguments::None,
                                                                                                                    },
                                                                                                                    PathSep,
                                                                                                                    PathSegment {
                                                                                                                        ident: Ident {
                                                                                                                            sym: ptr,
                                                                                                                            span: bytes(32751..32754),
                                                                                                                        },
                                                                                                                        arguments: PathArguments::None,
                                                                                                                    },
                                                                                                                    PathSep,
                                                                                                                    PathSegment {
                                                                                                                        ident: Ident {
                                                                                                                            sym: copy_nonoverlapping,
                                                                                                                            span: bytes(32756..32775),
                                                                                                                        },
                                                                                                                        arguments: PathArguments::None,
                                                                                                                    },
                                                                                                                ],
                                                                                                            },
                                                                                                        },
                                                                                                        paren_token: Paren,
                                                                                                        args: [
                                                                                                            Expr::Cast {
                                                                                                                attrs: [],
                                                                                                                expr: Expr::Path {
                                                                                                                    attrs: [],
                                                                                                                    qself: None,
                                                                                                                    path: Path {
                                                                                                                        leading_colon: None,
                                                                                                                        segments: [
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: data,
                                                                                                                                    span: bytes(32776..32780),
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                },
                                                                                                                as_token: As,
                                                                                                                ty: Type::Ptr {
                                                                                                                    star_token: Star,
                                                                                                                    const_token: None,
                                                                                                                    mutability: Some(
                                                                                                                        Mut,
                                                                                                                    ),
                                                                                                                    elem: Type::Path {
                                                                                                                        qself: None,
                                                                                                                        path: Path {
                                                                                                                            leading_colon: None,
                                                                                                                            segments: [
                                                                                                                                PathSegment {
                                                                                                                                    ident: Ident {
                                                                                                                                        sym: u8,
                                                                                                                                        span: bytes(32789..32791),
                                                                                                                                    },
                                                                                                                                    arguments: PathArguments::None,
                                                                                                                                },
                                                                                                                            ],
                                                                                                                        },
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                            Comma,
                                                                                                            Expr::Path {
                                                                                                                attrs: [],
                                                                                                                qself: None,
                                                                                                                path: Path {
                                                                                                                    leading_colon: None,
                                                                                                                    segments: [
                                                                                                                        PathSegment {
                                                                                                                            ident: Ident {
                                                                                                                                sym: found,
                                                                                                                                span: bytes(32793..32798),
                                                                                                                            },
                                                                                                                            arguments: PathArguments::None,
                                                                                                                        },
                                                                                                                    ],
                                                                                                                },
                                                                                                            },
                                                                                                            Comma,
                                                                                                            Expr::MethodCall {
                                                                                                                attrs: [],
                                                                                                                receiver: Expr::Path {
                                                                                                                    attrs: [],
                                                                                                                    qself: None,
                                                                                                                    path: Path {
                                                                                                                        leading_colon: None,
                                                                                                                        segments: [
                                                                                                                            PathSegment {
                                                                                                                                ident: Ident {
                                                                                                                                    sym: layout,
                                                                                                                                    span: bytes(32800..32806),
                                                                                                                                },
                                                                                                                                arguments: PathArguments::None,
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                },
                                                                                                                dot_token: Dot,
                                                                                                                method: Ident {
                                                                                                                    sym: size,
                                                                                                                    span: bytes(32807..32811),
                                                                                                                },
                                                                                                                turbofish: None,
                                                                                                                paren_token: Paren,
                                                                                                                args: [],
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                    Some(
                                                                                                        Semi,
                                                                                                    ),
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                    None,
                                                                                ),
                                                                                Stmt::Expr(
                                                                                    Expr::Break {
                                                                                        attrs: [],
                                                                                        break_token: Break,
                                                                                        label: None,
                                                                                        expr: Some(
                                                                                            Expr::Path {
                                                                                                attrs: [],
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: it,
                                                                                                                span: bytes(32864..32866),
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                    },
                                                                                    Some(
                                                                                        Semi,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    },
                                                                    comma: None,
                                                                },
                                                                Arm {
                                                                    attrs: [],
                                                                    pat: Pat::Ident {
                                                                        attrs: [],
                                                                        by_ref: None,
                                                                        mutability: None,
                                                                        ident: Ident {
                                                                            sym: None,
                                                                            span: bytes(32902..32906),
                                                                        },
                                                                        subpat: None,
                                                                    },
                                                                    guard: Some(
                                                                        (
                                                                            If,
                                                                            Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: Impl,
                                                                                                span: bytes(32910..32914),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                        PathSep,
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: GROW,
                                                                                                span: bytes(32916..32920),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                        ),
                                                                    ),
                                                                    fat_arrow_token: FatArrow,
                                                                    body: Expr::Block {
                                                                        attrs: [],
                                                                        label: None,
                                                                        block: Block {
                                                                            brace_token: Brace,
                                                                            stmts: [
                                                                                Stmt::Expr(
                                                                                    Expr::MethodCall {
                                                                                        attrs: [],
                                                                                        receiver: Expr::Path {
                                                                                            attrs: [],
                                                                                            qself: None,
                                                                                            path: Path {
                                                                                                leading_colon: None,
                                                                                                segments: [
                                                                                                    PathSegment {
                                                                                                        ident: Ident {
                                                                                                            sym: self,
                                                                                                            span: bytes(32946..32950),
                                                                                                        },
                                                                                                        arguments: PathArguments::None,
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                        dot_token: Dot,
                                                                                        method: Ident {
                                                                                            sym: reserve_layout,
                                                                                            span: bytes(32951..32965),
                                                                                        },
                                                                                        turbofish: None,
                                                                                        paren_token: Paren,
                                                                                        args: [
                                                                                            Expr::Path {
                                                                                                attrs: [],
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: layout,
                                                                                                                span: bytes(32966..32972),
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                    Some(
                                                                                        Semi,
                                                                                    ),
                                                                                ),
                                                                            ],
                                                                        },
                                                                    },
                                                                    comma: None,
                                                                },
                                                                Arm {
                                                                    attrs: [],
                                                                    pat: Pat::Wild {
                                                                        attrs: [],
                                                                        underscore_token: Underscore,
                                                                    },
                                                                    guard: None,
                                                                    fat_arrow_token: FatArrow,
                                                                    body: Expr::Block {
                                                                        attrs: [],
                                                                        label: None,
                                                                        block: Block {
                                                                            brace_token: Brace,
                                                                            stmts: [],
                                                                        },
                                                                    },
                                                                    comma: None,
                                                                },
                                                            ],
                                                        },
                                                        None,
                                                    ),
                                                ],
                                            },
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::Call {
                                    attrs: [],
                                    func: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: EntryRef,
                                                        span: bytes(33051..33059),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: new,
                                                        span: bytes(33061..33064),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    paren_token: Paren,
                                    args: [
                                        Expr::Reference {
                                            attrs: [],
                                            and_token: And,
                                            mutability: None,
                                            expr: Expr::Field {
                                                attrs: [],
                                                base: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: self,
                                                                    span: bytes(33066..33070),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                dot_token: Dot,
                                                member: Member::Named(
                                                    Ident {
                                                        sym: inner,
                                                        span: bytes(33071..33076),
                                                    },
                                                ),
                                            },
                                        },
                                        Comma,
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: range,
                                                            span: bytes(33078..33083),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33096..33167),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Variant of [`push_raw`](ContiguousMemory::push_raw) which returns a",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33172..33240),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " reference that doesn't mark the used memory segment as free when",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33245..33257),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " dropped.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33262..33265),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33270..33282),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33287..33290),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33295..33362),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Panics if the collection needs to grow and new capacity exceeds",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33367..33431),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `isize::MAX` bytes or allocation of additional memory fails.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33436..33439),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33444..33456),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Safety",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33461..33464),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33469..33508),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " See: [`ContiguousMemory::push_raw`]",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: Some(
                            Unsafe,
                        ),
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: push_raw_persisted,
                            span: bytes(33527..33545),
                        },
                        generics: Generics {
                            lt_token: Some(
                                Lt,
                            ),
                            params: [
                                GenericParam::Type(
                                    TypeParam {
                                        attrs: [],
                                        ident: Ident {
                                            sym: T,
                                            span: bytes(33546..33547),
                                        },
                                        colon_token: None,
                                        bounds: [],
                                        eq_token: None,
                                        default: None,
                                    },
                                ),
                            ],
                            gt_token: Some(
                                Gt,
                            ),
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(33563..33567),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: data,
                                            span: bytes(33577..33581),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Ptr {
                                        star_token: Star,
                                        const_token: Some(
                                            Const,
                                        ),
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: T,
                                                            span: bytes(33590..33591),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: layout,
                                            span: bytes(33601..33607),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Layout,
                                                        span: bytes(33609..33615),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                            Comma,
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Impl,
                                                span: bytes(33626..33630),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: PushResult,
                                                span: bytes(33632..33642),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: T,
                                                                            span: bytes(33643..33644),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: value,
                                        span: bytes(33660..33665),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: self,
                                                                span: bytes(33668..33672),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: push_raw,
                                                span: bytes(33673..33681),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: data,
                                                                    span: bytes(33682..33686),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                Comma,
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: layout,
                                                                    span: bytes(33688..33694),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: result,
                                        span: bytes(33709..33715),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: value,
                                                                span: bytes(33718..33723),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: clone,
                                                span: bytes(33724..33729),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::Call {
                                    attrs: [],
                                    func: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: core,
                                                        span: bytes(33741..33745),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: mem,
                                                        span: bytes(33747..33750),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: forget,
                                                        span: bytes(33752..33758),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    paren_token: Paren,
                                    args: [
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: value,
                                                            span: bytes(33759..33764),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                                Some(
                                    Semi,
                                ),
                            ),
                            Stmt::Expr(
                                Expr::Path {
                                    attrs: [],
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: result,
                                                    span: bytes(33775..33781),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33793..33861),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Assumes value is stored at the provided _relative_ `position` in",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33866..33928),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " managed memory and returns a pointer or a reference to it.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33933..33936),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33941..33953),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Safety",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33958..33961),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(33966..34038),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This function isn't unsafe because creating an invalid pointer isn't",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(34043..34113),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " considered unsafe. Responsibility for guaranteeing safety falls on",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(34118..34160),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " code that's dereferencing the pointer.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: assume_stored,
                            span: bytes(34172..34185),
                        },
                        generics: Generics {
                            lt_token: Some(
                                Lt,
                            ),
                            params: [
                                GenericParam::Type(
                                    TypeParam {
                                        attrs: [],
                                        ident: Ident {
                                            sym: T,
                                            span: bytes(34186..34187),
                                        },
                                        colon_token: None,
                                        bounds: [],
                                        eq_token: None,
                                        default: None,
                                    },
                                ),
                            ],
                            gt_token: Some(
                                Gt,
                            ),
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(34190..34194),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: position,
                                            span: bytes(34196..34204),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: usize,
                                                        span: bytes(34206..34211),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Impl,
                                                span: bytes(34216..34220),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: PushResult,
                                                span: bytes(34222..34232),
                                            },
                                            arguments: PathArguments::AngleBracketed {
                                                colon2_token: None,
                                                lt_token: Lt,
                                                args: [
                                                    GenericArgument::Type(
                                                        Type::Path {
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: T,
                                                                            span: bytes(34233..34234),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                                gt_token: Gt,
                                            },
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Call {
                                    attrs: [],
                                    func: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: EntryRef,
                                                        span: bytes(34246..34254),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: new,
                                                        span: bytes(34256..34259),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    paren_token: Paren,
                                    args: [
                                        Expr::Reference {
                                            attrs: [],
                                            and_token: And,
                                            mutability: None,
                                            expr: Expr::Field {
                                                attrs: [],
                                                base: Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: self,
                                                                    span: bytes(34261..34265),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                dot_token: Dot,
                                                member: Member::Named(
                                                    Ident {
                                                        sym: inner,
                                                        span: bytes(34266..34271),
                                                    },
                                                ),
                                            },
                                        },
                                        Comma,
                                        Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: ByteRange,
                                                                span: bytes(34273..34282),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: position,
                                                                    span: bytes(34283..34291),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                Comma,
                                                Expr::Binary {
                                                    attrs: [],
                                                    left: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: position,
                                                                        span: bytes(34293..34301),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    op: BinOp::Add(
                                                        Plus,
                                                    ),
                                                    right: Expr::Call {
                                                        attrs: [],
                                                        func: Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: size_of,
                                                                            span: bytes(34304..34311),
                                                                        },
                                                                        arguments: PathArguments::AngleBracketed {
                                                                            colon2_token: Some(
                                                                                PathSep,
                                                                            ),
                                                                            lt_token: Lt,
                                                                            args: [
                                                                                GenericArgument::Type(
                                                                                    Type::Path {
                                                                                        qself: None,
                                                                                        path: Path {
                                                                                            leading_colon: None,
                                                                                            segments: [
                                                                                                PathSegment {
                                                                                                    ident: Ident {
                                                                                                        sym: T,
                                                                                                        span: bytes(34314..34315),
                                                                                                    },
                                                                                                    arguments: PathArguments::None,
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            gt_token: Gt,
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        paren_token: Paren,
                                                        args: [],
                                                    },
                                                },
                                            ],
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(34332..34398),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Clones the allocated memory region into a new `MemoryStorage`.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(34403..34406),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(34411..34484),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This function isn't unsafe, even though it ignores presence of `Copy`",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(34489..34564),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " bound on stored data, because it doesn't create any invalid references.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: must_use,
                                                span: bytes(34571..34579),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "unused copied collection",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: copy_data,
                            span: bytes(34621..34630),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: Some(
                                WhereClause {
                                    where_token: Where,
                                    predicates: [
                                        WherePredicate::Type(
                                            PredicateType {
                                                lifetimes: None,
                                                bounded_ty: Type::Path {
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: A,
                                                                    span: bytes(34664..34665),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                colon_token: Colon,
                                                bounds: [
                                                    TypeParamBound::Trait(
                                                        TraitBound {
                                                            paren_token: None,
                                                            modifier: TraitBoundModifier::None,
                                                            lifetimes: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: Clone,
                                                                            span: bytes(34667..34672),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        Comma,
                                    ],
                                },
                            ),
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(34632..34636),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(34641..34645),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: current_layout,
                                        span: bytes(34692..34706),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: self,
                                                                span: bytes(34709..34713),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: layout,
                                                span: bytes(34714..34720),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: result,
                                        span: bytes(34736..34742),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Self,
                                                                span: bytes(34745..34749),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: with_layout_and_alloc,
                                                                span: bytes(34751..34772),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: current_layout,
                                                                    span: bytes(34773..34787),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                                Comma,
                                                Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Field {
                                                        attrs: [],
                                                        base: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: self,
                                                                                span: bytes(34789..34793),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: inner,
                                                                    span: bytes(34794..34799),
                                                                },
                                                            ),
                                                        },
                                                        dot_token: Dot,
                                                        member: Member::Named(
                                                            Ident {
                                                                sym: alloc,
                                                                span: bytes(34800..34805),
                                                            },
                                                        ),
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: clone,
                                                        span: bytes(34806..34811),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [],
                                                },
                                            ],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::Match {
                                    attrs: [],
                                    match_token: Match,
                                    expr: Expr::Field {
                                        attrs: [],
                                        base: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: self,
                                                                span: bytes(34830..34834),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: base,
                                                span: bytes(34835..34839),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        dot_token: Dot,
                                        member: Member::Named(
                                            Ident {
                                                sym: address,
                                                span: bytes(34842..34849),
                                            },
                                        ),
                                    },
                                    brace_token: Brace,
                                    arms: [
                                        Arm {
                                            attrs: [],
                                            pat: Pat::TupleStruct {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Some,
                                                                span: bytes(34864..34868),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                                paren_token: Paren,
                                                elems: [
                                                    Pat::Ident {
                                                        attrs: [],
                                                        by_ref: None,
                                                        mutability: None,
                                                        ident: Ident {
                                                            sym: base,
                                                            span: bytes(34869..34873),
                                                        },
                                                        subpat: None,
                                                    },
                                                ],
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Unsafe {
                                                attrs: [],
                                                unsafe_token: Unsafe,
                                                block: Block {
                                                    brace_token: Brace,
                                                    stmts: [
                                                        Stmt::Expr(
                                                            Expr::Call {
                                                                attrs: [],
                                                                func: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: core,
                                                                                    span: bytes(34903..34907),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                            PathSep,
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: ptr,
                                                                                    span: bytes(34909..34912),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                            PathSep,
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: copy_nonoverlapping,
                                                                                    span: bytes(34914..34933),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                paren_token: Paren,
                                                                args: [
                                                                    Expr::Cast {
                                                                        attrs: [],
                                                                        expr: Expr::MethodCall {
                                                                            attrs: [],
                                                                            receiver: Expr::Path {
                                                                                attrs: [],
                                                                                qself: None,
                                                                                path: Path {
                                                                                    leading_colon: None,
                                                                                    segments: [
                                                                                        PathSegment {
                                                                                            ident: Ident {
                                                                                                sym: base,
                                                                                                span: bytes(34955..34959),
                                                                                            },
                                                                                            arguments: PathArguments::None,
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                            dot_token: Dot,
                                                                            method: Ident {
                                                                                sym: as_ptr,
                                                                                span: bytes(34960..34966),
                                                                            },
                                                                            turbofish: None,
                                                                            paren_token: Paren,
                                                                            args: [],
                                                                        },
                                                                        as_token: As,
                                                                        ty: Type::Ptr {
                                                                            star_token: Star,
                                                                            const_token: Some(
                                                                                Const,
                                                                            ),
                                                                            mutability: None,
                                                                            elem: Type::Tuple {
                                                                                paren_token: Paren,
                                                                                elems: [],
                                                                            },
                                                                        },
                                                                    },
                                                                    Comma,
                                                                    Expr::Cast {
                                                                        attrs: [],
                                                                        expr: Expr::MethodCall {
                                                                            attrs: [],
                                                                            receiver: Expr::MethodCall {
                                                                                attrs: [],
                                                                                receiver: Expr::Path {
                                                                                    attrs: [],
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: result,
                                                                                                    span: bytes(35003..35009),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                                dot_token: Dot,
                                                                                method: Ident {
                                                                                    sym: base,
                                                                                    span: bytes(35010..35014),
                                                                                },
                                                                                turbofish: None,
                                                                                paren_token: Paren,
                                                                                args: [],
                                                                            },
                                                                            dot_token: Dot,
                                                                            method: Ident {
                                                                                sym: as_ptr_mut_unchecked,
                                                                                span: bytes(35017..35037),
                                                                            },
                                                                            turbofish: None,
                                                                            paren_token: Paren,
                                                                            args: [],
                                                                        },
                                                                        as_token: As,
                                                                        ty: Type::Ptr {
                                                                            star_token: Star,
                                                                            const_token: None,
                                                                            mutability: Some(
                                                                                Mut,
                                                                            ),
                                                                            elem: Type::Tuple {
                                                                                paren_token: Paren,
                                                                                elems: [],
                                                                            },
                                                                        },
                                                                    },
                                                                    Comma,
                                                                    Expr::MethodCall {
                                                                        attrs: [],
                                                                        receiver: Expr::Path {
                                                                            attrs: [],
                                                                            qself: None,
                                                                            path: Path {
                                                                                leading_colon: None,
                                                                                segments: [
                                                                                    PathSegment {
                                                                                        ident: Ident {
                                                                                            sym: current_layout,
                                                                                            span: bytes(35072..35086),
                                                                                        },
                                                                                        arguments: PathArguments::None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                        dot_token: Dot,
                                                                        method: Ident {
                                                                            sym: size,
                                                                            span: bytes(35087..35091),
                                                                        },
                                                                        turbofish: None,
                                                                        paren_token: Paren,
                                                                        args: [],
                                                                    },
                                                                    Comma,
                                                                ],
                                                            },
                                                            Some(
                                                                Semi,
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            },
                                            comma: Some(
                                                Comma,
                                            ),
                                        },
                                        Arm {
                                            attrs: [],
                                            pat: Pat::Ident {
                                                attrs: [],
                                                by_ref: None,
                                                mutability: None,
                                                ident: Ident {
                                                    sym: None,
                                                    span: bytes(35141..35145),
                                                },
                                                subpat: None,
                                            },
                                            guard: None,
                                            fat_arrow_token: FatArrow,
                                            body: Expr::Block {
                                                attrs: [],
                                                label: None,
                                                block: Block {
                                                    brace_token: Brace,
                                                    stmts: [],
                                                },
                                            },
                                            comma: None,
                                        },
                                    ],
                                },
                                None,
                            ),
                            Stmt::Expr(
                                Expr::Path {
                                    attrs: [],
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: result,
                                                    span: bytes(35236..35242),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35254..35327),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Marks the entire contents of the container as free, allowing new data",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35332..35384),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " to be stored in place of previously stored data.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35389..35392),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35397..35452),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This allows clearing persisted entries created with",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35457..35501),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " [`ContiguousMemory::push_persisted`] and",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35506..35559),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " [`ContiguousMemory::push_raw_persisted`] methods.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35564..35567),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35572..35584),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Safety",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35589..35592),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35597..35667),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This method is unsafe because it doesn't invalidate any previously",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35672..35747),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned references. Storing data into the container and then trying to",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35752..35825),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " access previously stored data from any existing references will cause",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(35830..35853),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " undefined behavior.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: Some(
                            Unsafe,
                        ),
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: clear,
                            span: bytes(35872..35877),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(35883..35887),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Default,
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: WritableInner,
                                                                span: bytes(35899..35912),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: write_named,
                                                                span: bytes(35914..35925),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Reference {
                                                    attrs: [],
                                                    and_token: And,
                                                    mutability: None,
                                                    expr: Expr::Field {
                                                        attrs: [],
                                                        base: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: self,
                                                                                span: bytes(35927..35931),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: inner,
                                                                    span: bytes(35932..35937),
                                                                },
                                                            ),
                                                        },
                                                        dot_token: Dot,
                                                        member: Member::Named(
                                                            Ident {
                                                                sym: tracker,
                                                                span: bytes(35938..35945),
                                                            },
                                                        ),
                                                    },
                                                },
                                                Comma,
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: LockTarget,
                                                                    span: bytes(35947..35957),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: SegmentTracker,
                                                                    span: bytes(35959..35973),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: unwrap,
                                            span: bytes(35988..35994),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [],
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: clear,
                                        span: bytes(36010..36015),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [],
                                },
                                Some(
                                    Semi,
                                ),
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36030..36105),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Marks the provided `region` of the container as free, allowing new data",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36110..36162),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " to be stored in place of previously stored data.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36167..36170),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36175..36230),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This allows clearing persisted entries created with",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36235..36279),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " [`ContiguousMemory::push_persisted`] and",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36284..36337),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " [`ContiguousMemory::push_raw_persisted`] methods.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36342..36345),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36350..36362),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Panics",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36367..36370),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36375..36450),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This function panics in debug mode if the provided region falls outside",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36455..36504),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " of the memory tracked by the segment tracker.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36509..36512),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36517..36529),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Safety",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36534..36537),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36542..36612),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This method is unsafe because it doesn't invalidate any previously",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36617..36684),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " returned references overlapping `region`. Storing data into the",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36689..36756),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " container and then trying to access previously stored data from",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(36761..36815),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " overlapping regions will cause undefined behavior.",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: Some(
                            Unsafe,
                        ),
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: clear_region,
                            span: bytes(36834..36846),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: Some(
                                        Mut,
                                    ),
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(36852..36856),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: region,
                                            span: bytes(36858..36864),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ByteRange,
                                                        span: bytes(36866..36875),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Default,
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: WritableInner,
                                                                span: bytes(36887..36900),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: write_named,
                                                                span: bytes(36902..36913),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [
                                                Expr::Reference {
                                                    attrs: [],
                                                    and_token: And,
                                                    mutability: None,
                                                    expr: Expr::Field {
                                                        attrs: [],
                                                        base: Expr::Field {
                                                            attrs: [],
                                                            base: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: self,
                                                                                span: bytes(36915..36919),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            dot_token: Dot,
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: inner,
                                                                    span: bytes(36920..36925),
                                                                },
                                                            ),
                                                        },
                                                        dot_token: Dot,
                                                        member: Member::Named(
                                                            Ident {
                                                                sym: tracker,
                                                                span: bytes(36926..36933),
                                                            },
                                                        ),
                                                    },
                                                },
                                                Comma,
                                                Expr::Path {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: LockTarget,
                                                                    span: bytes(36935..36945),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                            PathSep,
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: SegmentTracker,
                                                                    span: bytes(36947..36961),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: unwrap,
                                            span: bytes(36976..36982),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [],
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: release,
                                        span: bytes(36998..37005),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: region,
                                                            span: bytes(37006..37012),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                                Some(
                                    Semi,
                                ),
                            ),
                        ],
                    },
                },
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37026..37101),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Forgets this container without dropping it and returns its base address",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37106..37125),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " and [`Layout`].",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37130..37133),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37138..37150),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " # Safety",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37155..37158),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37163..37238),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Calling this method will create a memory leak because the smart pointer",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37243..37318),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " to state will not be dropped even when all of the created references go",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37323..37397),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " out of scope. As this method takes ownership of the container, calling",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37402..37460),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " it also ensures that dereferencing pointers created by",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37465..37525),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " [`as_ptr`](refs::ContiguousEntryRef::as_ptr) and related",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37530..37590),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " `ContiguousEntryRef` functions is guaranteed to be safe.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37595..37598),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37603..37671),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " This method isn't unsafe as leaking data doesn't cause undefined",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37676..37689),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " behavior.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(37694..37763),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " ([_see details_](https://doc.rust-lang.org/nomicon/leaking.html))",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Public(
                        Pub,
                    ),
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: forget,
                            span: bytes(37775..37781),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: None,
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Self,
                                                        span: bytes(37782..37786),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: MemoryBase,
                                                span: bytes(37791..37801),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Local {
                                attrs: [],
                                let_token: Let,
                                pat: Pat::Ident {
                                    attrs: [],
                                    by_ref: None,
                                    mutability: None,
                                    ident: Ident {
                                        sym: base,
                                        span: bytes(37816..37820),
                                    },
                                    subpat: None,
                                },
                                init: Some(
                                    LocalInit {
                                        eq_token: Eq,
                                        expr: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: self,
                                                                span: bytes(37823..37827),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: base,
                                                span: bytes(37828..37832),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [],
                                        },
                                        diverge: None,
                                    },
                                ),
                                semi_token: Semi,
                            },
                            Stmt::Expr(
                                Expr::Call {
                                    attrs: [],
                                    func: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: core,
                                                        span: bytes(37844..37848),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: mem,
                                                        span: bytes(37850..37853),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: forget,
                                                        span: bytes(37855..37861),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    paren_token: Paren,
                                    args: [
                                        Expr::Path {
                                            attrs: [],
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: self,
                                                            span: bytes(37862..37866),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                                Some(
                                    Semi,
                                ),
                            ),
                            Stmt::Expr(
                                Expr::Path {
                                    attrs: [],
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: base,
                                                    span: bytes(37877..37881),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                                None,
                            ),
                        ],
                    },
                },
            ],
        },
        Item::Impl {
            attrs: [
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::List {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: cfg,
                                        span: bytes(37893..37896),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        delimiter: MacroDelimiter::Paren(
                            Paren,
                        ),
                        tokens: TokenStream [
                            Ident {
                                sym: feature,
                                span: bytes(37897..37904),
                            },
                            Punct {
                                char: '=',
                                spacing: Alone,
                                span: bytes(37905..37906),
                            },
                            Literal {
                                lit: "debug",
                                span: bytes(37907..37914),
                            },
                        ],
                    },
                },
            ],
            defaultness: None,
            unsafety: None,
            impl_token: Impl,
            generics: Generics {
                lt_token: Some(
                    Lt,
                ),
                params: [
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: Impl,
                                span: bytes(37922..37926),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ImplDetails,
                                                        span: bytes(37928..37939),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: A,
                                                                                    span: bytes(37940..37941),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                    Comma,
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: A,
                                span: bytes(37944..37945),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ManageMemory,
                                                        span: bytes(37947..37959),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                ],
                gt_token: Some(
                    Gt,
                ),
                where_clause: Some(
                    WhereClause {
                        where_token: Where,
                        predicates: [
                            WherePredicate::Type(
                                PredicateType {
                                    lifetimes: None,
                                    bounded_ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Impl,
                                                        span: bytes(38018..38022),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: StateRef,
                                                        span: bytes(38024..38032),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: MemoryState,
                                                                                    span: bytes(38033..38044),
                                                                                },
                                                                                arguments: PathArguments::AngleBracketed {
                                                                                    colon2_token: None,
                                                                                    lt_token: Lt,
                                                                                    args: [
                                                                                        GenericArgument::Type(
                                                                                            Type::Path {
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: Impl,
                                                                                                                span: bytes(38045..38049),
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        Comma,
                                                                                        GenericArgument::Type(
                                                                                            Type::Path {
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: A,
                                                                                                                span: bytes(38051..38052),
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    gt_token: Gt,
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                    colon_token: Colon,
                                    bounds: [
                                        TypeParamBound::Trait(
                                            TraitBound {
                                                paren_token: None,
                                                modifier: TraitBoundModifier::None,
                                                lifetimes: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: core,
                                                                span: bytes(38056..38060),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: fmt,
                                                                span: bytes(38062..38065),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Debug,
                                                                span: bytes(38067..38072),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                            Comma,
                        ],
                    },
                ),
            },
            trait_: Some(
                (
                    None,
                    Path {
                        leading_colon: None,
                        segments: [
                            PathSegment {
                                ident: Ident {
                                    sym: core,
                                    span: bytes(37961..37965),
                                },
                                arguments: PathArguments::None,
                            },
                            PathSep,
                            PathSegment {
                                ident: Ident {
                                    sym: fmt,
                                    span: bytes(37967..37970),
                                },
                                arguments: PathArguments::None,
                            },
                            PathSep,
                            PathSegment {
                                ident: Ident {
                                    sym: Debug,
                                    span: bytes(37972..37977),
                                },
                                arguments: PathArguments::None,
                            },
                        ],
                    },
                    For,
                ),
            ),
            self_ty: Type::Path {
                qself: None,
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: ContiguousMemory,
                                span: bytes(37982..37998),
                            },
                            arguments: PathArguments::AngleBracketed {
                                colon2_token: None,
                                lt_token: Lt,
                                args: [
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Impl,
                                                            span: bytes(37999..38003),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                    Comma,
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: A,
                                                            span: bytes(38005..38006),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                ],
                                gt_token: Gt,
                            },
                        },
                    ],
                },
            },
            brace_token: Brace,
            items: [
                ImplItem::Fn {
                    attrs: [],
                    vis: Visibility::Inherited,
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: fmt,
                            span: bytes(38083..38086),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(38088..38092),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                            Comma,
                            FnArg::Typed(
                                PatType {
                                    attrs: [],
                                    pat: Pat::Ident {
                                        attrs: [],
                                        by_ref: None,
                                        mutability: None,
                                        ident: Ident {
                                            sym: f,
                                            span: bytes(38094..38095),
                                        },
                                        subpat: None,
                                    },
                                    colon_token: Colon,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: Some(
                                            Mut,
                                        ),
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: core,
                                                            span: bytes(38102..38106),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                    PathSep,
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: fmt,
                                                            span: bytes(38108..38111),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                    PathSep,
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Formatter,
                                                            span: bytes(38113..38122),
                                                        },
                                                        arguments: PathArguments::AngleBracketed {
                                                            colon2_token: None,
                                                            lt_token: Lt,
                                                            args: [
                                                                GenericArgument::Lifetime(
                                                                    Lifetime {
                                                                        apostrophe: bytes(38123..38124),
                                                                        ident: Ident {
                                                                            sym: _,
                                                                            span: bytes(38124..38125),
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                            gt_token: Gt,
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: core,
                                                span: bytes(38131..38135),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: fmt,
                                                span: bytes(38137..38140),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                        PathSep,
                                        PathSegment {
                                            ident: Ident {
                                                sym: Result,
                                                span: bytes(38142..38148),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::MethodCall {
                                    attrs: [],
                                    receiver: Expr::MethodCall {
                                        attrs: [],
                                        receiver: Expr::MethodCall {
                                            attrs: [],
                                            receiver: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: f,
                                                                span: bytes(38159..38160),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            dot_token: Dot,
                                            method: Ident {
                                                sym: debug_struct,
                                                span: bytes(38161..38173),
                                            },
                                            turbofish: None,
                                            paren_token: Paren,
                                            args: [
                                                Expr::Lit {
                                                    attrs: [],
                                                    lit: Lit::Str {
                                                        token: "ContiguousMemory",
                                                    },
                                                },
                                            ],
                                        },
                                        dot_token: Dot,
                                        method: Ident {
                                            sym: field,
                                            span: bytes(38207..38212),
                                        },
                                        turbofish: None,
                                        paren_token: Paren,
                                        args: [
                                            Expr::Lit {
                                                attrs: [],
                                                lit: Lit::Str {
                                                    token: "inner",
                                                },
                                            },
                                            Comma,
                                            Expr::Reference {
                                                attrs: [],
                                                and_token: And,
                                                mutability: None,
                                                expr: Expr::Field {
                                                    attrs: [],
                                                    base: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: self,
                                                                        span: bytes(38223..38227),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    member: Member::Named(
                                                        Ident {
                                                            sym: inner,
                                                            span: bytes(38228..38233),
                                                        },
                                                    ),
                                                },
                                            },
                                        ],
                                    },
                                    dot_token: Dot,
                                    method: Ident {
                                        sym: finish,
                                        span: bytes(38248..38254),
                                    },
                                    turbofish: None,
                                    paren_token: Paren,
                                    args: [],
                                },
                                None,
                            ),
                        ],
                    },
                },
            ],
        },
        Item::Impl {
            attrs: [],
            defaultness: None,
            unsafety: None,
            impl_token: Impl,
            generics: Generics {
                lt_token: Some(
                    Lt,
                ),
                params: [
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: Impl,
                                span: bytes(38271..38275),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ImplDetails,
                                                        span: bytes(38277..38288),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: A,
                                                                                    span: bytes(38289..38290),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                    Comma,
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: A,
                                span: bytes(38293..38294),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ManageMemory,
                                                        span: bytes(38296..38308),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                ],
                gt_token: Some(
                    Gt,
                ),
                where_clause: Some(
                    WhereClause {
                        where_token: Where,
                        predicates: [
                            WherePredicate::Type(
                                PredicateType {
                                    lifetimes: None,
                                    bounded_ty: Type::Path {
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Impl,
                                                        span: bytes(38356..38360),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: StateRef,
                                                        span: bytes(38362..38370),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: MemoryState,
                                                                                    span: bytes(38371..38382),
                                                                                },
                                                                                arguments: PathArguments::AngleBracketed {
                                                                                    colon2_token: None,
                                                                                    lt_token: Lt,
                                                                                    args: [
                                                                                        GenericArgument::Type(
                                                                                            Type::Path {
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: Impl,
                                                                                                                span: bytes(38383..38387),
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                        Comma,
                                                                                        GenericArgument::Type(
                                                                                            Type::Path {
                                                                                                qself: None,
                                                                                                path: Path {
                                                                                                    leading_colon: None,
                                                                                                    segments: [
                                                                                                        PathSegment {
                                                                                                            ident: Ident {
                                                                                                                sym: A,
                                                                                                                span: bytes(38389..38390),
                                                                                                            },
                                                                                                            arguments: PathArguments::None,
                                                                                                        },
                                                                                                    ],
                                                                                                },
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                    gt_token: Gt,
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                    colon_token: Colon,
                                    bounds: [
                                        TypeParamBound::Trait(
                                            TraitBound {
                                                paren_token: None,
                                                modifier: TraitBoundModifier::None,
                                                lifetimes: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: Clone,
                                                                span: bytes(38394..38399),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                        ),
                                    ],
                                },
                            ),
                            Comma,
                        ],
                    },
                ),
            },
            trait_: Some(
                (
                    None,
                    Path {
                        leading_colon: None,
                        segments: [
                            PathSegment {
                                ident: Ident {
                                    sym: Clone,
                                    span: bytes(38310..38315),
                                },
                                arguments: PathArguments::None,
                            },
                        ],
                    },
                    For,
                ),
            ),
            self_ty: Type::Path {
                qself: None,
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: ContiguousMemory,
                                span: bytes(38320..38336),
                            },
                            arguments: PathArguments::AngleBracketed {
                                colon2_token: None,
                                lt_token: Lt,
                                args: [
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Impl,
                                                            span: bytes(38337..38341),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                    Comma,
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: A,
                                                            span: bytes(38343..38344),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                ],
                                gt_token: Gt,
                            },
                        },
                    ],
                },
            },
            brace_token: Brace,
            items: [
                ImplItem::Fn {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(38407..38478),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " Creates a copy which represents the same memory region as this one.",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(38483..38486),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: "",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(38491..38566),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " If you need to copy the memory region of this container into a new one,",
                                    },
                                },
                            },
                        },
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: doc,
                                                span: bytes(38571..38611),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " use: [`ContiguousMemory::copy_data`]",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Inherited,
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: clone,
                            span: bytes(38619..38624),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [
                            FnArg::Receiver(
                                Receiver {
                                    attrs: [],
                                    reference: Some(
                                        (
                                            And,
                                            None,
                                        ),
                                    ),
                                    mutability: None,
                                    self_token: SelfValue,
                                    colon_token: None,
                                    ty: Type::Reference {
                                        and_token: And,
                                        lifetime: None,
                                        mutability: None,
                                        elem: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Self,
                                                            span: bytes(38626..38630),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                },
                            ),
                        ],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(38635..38639),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Struct {
                                    attrs: [],
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: Self,
                                                    span: bytes(38650..38654),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                    brace_token: Brace,
                                    fields: [
                                        FieldValue {
                                            attrs: [],
                                            member: Member::Named(
                                                Ident {
                                                    sym: inner,
                                                    span: bytes(38669..38674),
                                                },
                                            ),
                                            colon_token: Some(
                                                Colon,
                                            ),
                                            expr: Expr::MethodCall {
                                                attrs: [],
                                                receiver: Expr::Field {
                                                    attrs: [],
                                                    base: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: self,
                                                                        span: bytes(38676..38680),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    member: Member::Named(
                                                        Ident {
                                                            sym: inner,
                                                            span: bytes(38681..38686),
                                                        },
                                                    ),
                                                },
                                                dot_token: Dot,
                                                method: Ident {
                                                    sym: clone,
                                                    span: bytes(38687..38692),
                                                },
                                                turbofish: None,
                                                paren_token: Paren,
                                                args: [],
                                            },
                                        },
                                        Comma,
                                    ],
                                    dot2_token: None,
                                    rest: None,
                                },
                                None,
                            ),
                        ],
                    },
                },
            ],
        },
        Item::Impl {
            attrs: [],
            defaultness: None,
            unsafety: None,
            impl_token: Impl,
            generics: Generics {
                lt_token: Some(
                    Lt,
                ),
                params: [
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: Impl,
                                span: bytes(38720..38724),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ImplDetails,
                                                        span: bytes(38726..38737),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: DefaultMemoryManager,
                                                                                    span: bytes(38738..38758),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                ],
                gt_token: Some(
                    Gt,
                ),
                where_clause: None,
            },
            trait_: Some(
                (
                    None,
                    Path {
                        leading_colon: None,
                        segments: [
                            PathSegment {
                                ident: Ident {
                                    sym: Default,
                                    span: bytes(38761..38768),
                                },
                                arguments: PathArguments::None,
                            },
                        ],
                    },
                    For,
                ),
            ),
            self_ty: Type::Path {
                qself: None,
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: ContiguousMemory,
                                span: bytes(38773..38789),
                            },
                            arguments: PathArguments::AngleBracketed {
                                colon2_token: None,
                                lt_token: Lt,
                                args: [
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Impl,
                                                            span: bytes(38790..38794),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                ],
                                gt_token: Gt,
                            },
                        },
                    ],
                },
            },
            brace_token: Brace,
            items: [
                ImplItem::Fn {
                    attrs: [],
                    vis: Visibility::Inherited,
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: default,
                            span: bytes(38805..38812),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(38818..38822),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Call {
                                    attrs: [],
                                    func: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ContiguousMemory,
                                                        span: bytes(38833..38849),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: new,
                                                        span: bytes(38851..38854),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    paren_token: Paren,
                                    args: [],
                                },
                                None,
                            ),
                        ],
                    },
                },
            ],
        },
        Item::Impl {
            attrs: [],
            defaultness: None,
            unsafety: None,
            impl_token: Impl,
            generics: Generics {
                lt_token: Some(
                    Lt,
                ),
                params: [
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: Impl,
                                span: bytes(38871..38875),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ImplDetails,
                                                        span: bytes(38877..38888),
                                                    },
                                                    arguments: PathArguments::AngleBracketed {
                                                        colon2_token: None,
                                                        lt_token: Lt,
                                                        args: [
                                                            GenericArgument::Type(
                                                                Type::Path {
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: A,
                                                                                    span: bytes(38889..38890),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ),
                                                        ],
                                                        gt_token: Gt,
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                    Comma,
                    GenericParam::Type(
                        TypeParam {
                            attrs: [],
                            ident: Ident {
                                sym: A,
                                span: bytes(38893..38894),
                            },
                            colon_token: Some(
                                Colon,
                            ),
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ManageMemory,
                                                        span: bytes(38896..38908),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                                Plus,
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: Default,
                                                        span: bytes(38911..38918),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                            eq_token: None,
                            default: None,
                        },
                    ),
                ],
                gt_token: Some(
                    Gt,
                ),
                where_clause: None,
            },
            trait_: Some(
                (
                    None,
                    Path {
                        leading_colon: None,
                        segments: [
                            PathSegment {
                                ident: Ident {
                                    sym: Default,
                                    span: bytes(38920..38927),
                                },
                                arguments: PathArguments::None,
                            },
                        ],
                    },
                    For,
                ),
            ),
            self_ty: Type::Path {
                qself: None,
                path: Path {
                    leading_colon: None,
                    segments: [
                        PathSegment {
                            ident: Ident {
                                sym: ContiguousMemory,
                                span: bytes(38932..38948),
                            },
                            arguments: PathArguments::AngleBracketed {
                                colon2_token: None,
                                lt_token: Lt,
                                args: [
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Impl,
                                                            span: bytes(38949..38953),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                    Comma,
                                    GenericArgument::Type(
                                        Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: A,
                                                            span: bytes(38955..38956),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    ),
                                ],
                                gt_token: Gt,
                            },
                        },
                    ],
                },
            },
            brace_token: Brace,
            items: [
                ImplItem::Fn {
                    attrs: [],
                    vis: Visibility::Inherited,
                    defaultness: None,
                    sig: Signature {
                        constness: None,
                        asyncness: None,
                        unsafety: None,
                        abi: None,
                        fn_token: Fn,
                        ident: Ident {
                            sym: default,
                            span: bytes(38967..38974),
                        },
                        generics: Generics {
                            lt_token: None,
                            params: [],
                            gt_token: None,
                            where_clause: None,
                        },
                        paren_token: Paren,
                        inputs: [],
                        variadic: None,
                        output: ReturnType::Type(
                            RArrow,
                            Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident {
                                                sym: Self,
                                                span: bytes(38980..38984),
                                            },
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    },
                    block: Block {
                        brace_token: Brace,
                        stmts: [
                            Stmt::Expr(
                                Expr::Call {
                                    attrs: [],
                                    func: Expr::Path {
                                        attrs: [],
                                        qself: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: ContiguousMemory,
                                                        span: bytes(38995..39011),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                                PathSep,
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: with_alloc,
                                                        span: bytes(39013..39023),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                    paren_token: Paren,
                                    args: [
                                        Expr::Call {
                                            attrs: [],
                                            func: Expr::Path {
                                                attrs: [],
                                                qself: None,
                                                path: Path {
                                                    leading_colon: None,
                                                    segments: [
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: A,
                                                                span: bytes(39024..39025),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                        PathSep,
                                                        PathSegment {
                                                            ident: Ident {
                                                                sym: default,
                                                                span: bytes(39027..39034),
                                                            },
                                                            arguments: PathArguments::None,
                                                        },
                                                    ],
                                                },
                                            },
                                            paren_token: Paren,
                                            args: [],
                                        },
                                    ],
                                },
                                None,
                            ),
                        ],
                    },
                },
            ],
        },
        Item::Mod {
            attrs: [
                Attribute {
                    pound_token: Pound,
                    style: AttrStyle::Outer,
                    bracket_token: Bracket,
                    meta: Meta::List {
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident {
                                        sym: cfg,
                                        span: bytes(39049..39052),
                                    },
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                        delimiter: MacroDelimiter::Paren(
                            Paren,
                        ),
                        tokens: TokenStream [
                            Ident {
                                sym: all,
                                span: bytes(39053..39056),
                            },
                            Group {
                                delimiter: Parenthesis,
                                stream: TokenStream [
                                    Ident {
                                        sym: test,
                                        span: bytes(39057..39061),
                                    },
                                    Punct {
                                        char: ',',
                                        spacing: Alone,
                                        span: bytes(39061..39062),
                                    },
                                    Ident {
                                        sym: not,
                                        span: bytes(39063..39066),
                                    },
                                    Group {
                                        delimiter: Parenthesis,
                                        stream: TokenStream [
                                            Ident {
                                                sym: feature,
                                                span: bytes(39067..39074),
                                            },
                                            Punct {
                                                char: '=',
                                                spacing: Alone,
                                                span: bytes(39075..39076),
                                            },
                                            Literal {
                                                lit: "no_std",
                                                span: bytes(39077..39085),
                                            },
                                        ],
                                        span: bytes(39066..39086),
                                    },
                                ],
                                span: bytes(39056..39087),
                            },
                        ],
                    },
                },
            ],
            vis: Visibility::Inherited,
            unsafety: None,
            mod_token: Mod,
            ident: Ident {
                sym: test,
                span: bytes(39094..39098),
            },
            content: Some(
                (
                    Brace,
                    [
                        Item::Use {
                            attrs: [],
                            vis: Visibility::Inherited,
                            use_token: Use,
                            leading_colon: None,
                            tree: UseTree::Path(
                                UsePath {
                                    ident: Ident {
                                        sym: super,
                                        span: bytes(39109..39114),
                                    },
                                    colon2_token: PathSep,
                                    tree: UseTree::Glob(
                                        UseGlob {
                                            star_token: Star,
                                        },
                                    ),
                                },
                            ),
                            semi_token: Semi,
                        },
                        Item::Struct {
                            attrs: [
                                Attribute {
                                    pound_token: Pound,
                                    style: AttrStyle::Outer,
                                    bracket_token: Bracket,
                                    meta: Meta::List {
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: derive,
                                                        span: bytes(39126..39132),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                        delimiter: MacroDelimiter::Paren(
                                            Paren,
                                        ),
                                        tokens: TokenStream [
                                            Ident {
                                                sym: Debug,
                                                span: bytes(39133..39138),
                                            },
                                            Punct {
                                                char: ',',
                                                spacing: Alone,
                                                span: bytes(39138..39139),
                                            },
                                            Ident {
                                                sym: Clone,
                                                span: bytes(39140..39145),
                                            },
                                            Punct {
                                                char: ',',
                                                spacing: Alone,
                                                span: bytes(39145..39146),
                                            },
                                            Ident {
                                                sym: PartialEq,
                                                span: bytes(39147..39156),
                                            },
                                            Punct {
                                                char: ',',
                                                spacing: Alone,
                                                span: bytes(39156..39157),
                                            },
                                            Ident {
                                                sym: Eq,
                                                span: bytes(39158..39160),
                                            },
                                        ],
                                    },
                                },
                                Attribute {
                                    pound_token: Pound,
                                    style: AttrStyle::Outer,
                                    bracket_token: Bracket,
                                    meta: Meta::List {
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: repr,
                                                        span: bytes(39169..39173),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                        delimiter: MacroDelimiter::Paren(
                                            Paren,
                                        ),
                                        tokens: TokenStream [
                                            Ident {
                                                sym: C,
                                                span: bytes(39174..39175),
                                            },
                                        ],
                                    },
                                },
                            ],
                            vis: Visibility::Inherited,
                            struct_token: Struct,
                            ident: Ident {
                                sym: Person,
                                span: bytes(39189..39195),
                            },
                            generics: Generics {
                                lt_token: None,
                                params: [],
                                gt_token: None,
                                where_clause: None,
                            },
                            fields: Fields::Named {
                                brace_token: Brace,
                                named: [
                                    Field {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        mutability: FieldMutability::None,
                                        ident: Some(
                                            Ident {
                                                sym: name,
                                                span: bytes(39206..39210),
                                            },
                                        ),
                                        colon_token: Some(
                                            Colon,
                                        ),
                                        ty: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: String,
                                                            span: bytes(39212..39218),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    Comma,
                                    Field {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        mutability: FieldMutability::None,
                                        ident: Some(
                                            Ident {
                                                sym: last_name,
                                                span: bytes(39228..39237),
                                            },
                                        ),
                                        colon_token: Some(
                                            Colon,
                                        ),
                                        ty: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: String,
                                                            span: bytes(39239..39245),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    Comma,
                                ],
                            },
                            semi_token: None,
                        },
                        Item::Struct {
                            attrs: [
                                Attribute {
                                    pound_token: Pound,
                                    style: AttrStyle::Outer,
                                    bracket_token: Bracket,
                                    meta: Meta::List {
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: derive,
                                                        span: bytes(39260..39266),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                        delimiter: MacroDelimiter::Paren(
                                            Paren,
                                        ),
                                        tokens: TokenStream [
                                            Ident {
                                                sym: Debug,
                                                span: bytes(39267..39272),
                                            },
                                            Punct {
                                                char: ',',
                                                spacing: Alone,
                                                span: bytes(39272..39273),
                                            },
                                            Ident {
                                                sym: Clone,
                                                span: bytes(39274..39279),
                                            },
                                            Punct {
                                                char: ',',
                                                spacing: Alone,
                                                span: bytes(39279..39280),
                                            },
                                            Ident {
                                                sym: PartialEq,
                                                span: bytes(39281..39290),
                                            },
                                            Punct {
                                                char: ',',
                                                spacing: Alone,
                                                span: bytes(39290..39291),
                                            },
                                            Ident {
                                                sym: Eq,
                                                span: bytes(39292..39294),
                                            },
                                        ],
                                    },
                                },
                                Attribute {
                                    pound_token: Pound,
                                    style: AttrStyle::Outer,
                                    bracket_token: Bracket,
                                    meta: Meta::List {
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident {
                                                        sym: repr,
                                                        span: bytes(39303..39307),
                                                    },
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                        delimiter: MacroDelimiter::Paren(
                                            Paren,
                                        ),
                                        tokens: TokenStream [
                                            Ident {
                                                sym: C,
                                                span: bytes(39308..39309),
                                            },
                                        ],
                                    },
                                },
                            ],
                            vis: Visibility::Inherited,
                            struct_token: Struct,
                            ident: Ident {
                                sym: Car,
                                span: bytes(39323..39326),
                            },
                            generics: Generics {
                                lt_token: None,
                                params: [],
                                gt_token: None,
                                where_clause: None,
                            },
                            fields: Fields::Named {
                                brace_token: Brace,
                                named: [
                                    Field {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        mutability: FieldMutability::None,
                                        ident: Some(
                                            Ident {
                                                sym: owner,
                                                span: bytes(39337..39342),
                                            },
                                        ),
                                        colon_token: Some(
                                            Colon,
                                        ),
                                        ty: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Person,
                                                            span: bytes(39344..39350),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    Comma,
                                    Field {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        mutability: FieldMutability::None,
                                        ident: Some(
                                            Ident {
                                                sym: driver,
                                                span: bytes(39360..39366),
                                            },
                                        ),
                                        colon_token: Some(
                                            Colon,
                                        ),
                                        ty: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: Option,
                                                            span: bytes(39368..39374),
                                                        },
                                                        arguments: PathArguments::AngleBracketed {
                                                            colon2_token: None,
                                                            lt_token: Lt,
                                                            args: [
                                                                GenericArgument::Type(
                                                                    Type::Path {
                                                                        qself: None,
                                                                        path: Path {
                                                                            leading_colon: None,
                                                                            segments: [
                                                                                PathSegment {
                                                                                    ident: Ident {
                                                                                        sym: Person,
                                                                                        span: bytes(39375..39381),
                                                                                    },
                                                                                    arguments: PathArguments::None,
                                                                                },
                                                                            ],
                                                                        },
                                                                    },
                                                                ),
                                                            ],
                                                            gt_token: Gt,
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    Comma,
                                    Field {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        mutability: FieldMutability::None,
                                        ident: Some(
                                            Ident {
                                                sym: cost,
                                                span: bytes(39392..39396),
                                            },
                                        ),
                                        colon_token: Some(
                                            Colon,
                                        ),
                                        ty: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: u32,
                                                            span: bytes(39398..39401),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    Comma,
                                    Field {
                                        attrs: [],
                                        vis: Visibility::Inherited,
                                        mutability: FieldMutability::None,
                                        ident: Some(
                                            Ident {
                                                sym: miles,
                                                span: bytes(39411..39416),
                                            },
                                        ),
                                        colon_token: Some(
                                            Colon,
                                        ),
                                        ty: Type::Path {
                                            qself: None,
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: u32,
                                                            span: bytes(39418..39421),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                        },
                                    },
                                    Comma,
                                ],
                            },
                            semi_token: None,
                        },
                        Item::Fn {
                            attrs: [
                                Attribute {
                                    pound_token: Pound,
                                    style: AttrStyle::Outer,
                                    bracket_token: Bracket,
                                    meta: Meta::Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: test,
                                                    span: bytes(39436..39440),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            ],
                            vis: Visibility::Inherited,
                            sig: Signature {
                                constness: None,
                                asyncness: None,
                                unsafety: None,
                                abi: None,
                                fn_token: Fn,
                                ident: Ident {
                                    sym: store_and_get,
                                    span: bytes(39449..39462),
                                },
                                generics: Generics {
                                    lt_token: None,
                                    params: [],
                                    gt_token: None,
                                    where_clause: None,
                                },
                                paren_token: Paren,
                                inputs: [],
                                variadic: None,
                                output: ReturnType::Default,
                            },
                            block: Block {
                                brace_token: Brace,
                                stmts: [
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: Some(
                                                Mut,
                                            ),
                                            ident: Ident {
                                                sym: memory,
                                                span: bytes(39483..39489),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: ContiguousMemory,
                                                                        span: bytes(39492..39508),
                                                                    },
                                                                    arguments: PathArguments::AngleBracketed {
                                                                        colon2_token: Some(
                                                                            PathSep,
                                                                        ),
                                                                        lt_token: Lt,
                                                                        args: [
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: ImplDefault,
                                                                                                    span: bytes(39511..39522),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                        gt_token: Gt,
                                                                    },
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: with_capacity,
                                                                        span: bytes(39525..39538),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Lit {
                                                            attrs: [],
                                                            lit: Lit::Int {
                                                                token: 1024,
                                                            },
                                                        },
                                                    ],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: person_a,
                                                span: bytes(39559..39567),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Struct {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: Person,
                                                                    span: bytes(39570..39576),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    brace_token: Brace,
                                                    fields: [
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: name,
                                                                    span: bytes(39591..39595),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Lit {
                                                                    attrs: [],
                                                                    lit: Lit::Str {
                                                                        token: "Jerry",
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: to_string,
                                                                    span: bytes(39605..39614),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                        },
                                                        Comma,
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: last_name,
                                                                    span: bytes(39630..39639),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Lit {
                                                                    attrs: [],
                                                                    lit: Lit::Str {
                                                                        token: "Taylor",
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: to_string,
                                                                    span: bytes(39650..39659),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                        },
                                                        Comma,
                                                    ],
                                                    dot2_token: None,
                                                    rest: None,
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: person_b,
                                                span: bytes(39687..39695),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Struct {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: Person,
                                                                    span: bytes(39698..39704),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    brace_token: Brace,
                                                    fields: [
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: name,
                                                                    span: bytes(39719..39723),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Lit {
                                                                    attrs: [],
                                                                    lit: Lit::Str {
                                                                        token: "Larry",
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: to_string,
                                                                    span: bytes(39733..39742),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                        },
                                                        Comma,
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: last_name,
                                                                    span: bytes(39758..39767),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Lit {
                                                                    attrs: [],
                                                                    lit: Lit::Str {
                                                                        token: "Taylor",
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: to_string,
                                                                    span: bytes(39778..39787),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                        },
                                                        Comma,
                                                    ],
                                                    dot2_token: None,
                                                    rest: None,
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: car_a,
                                                span: bytes(39815..39820),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Struct {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: Car,
                                                                    span: bytes(39823..39826),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    brace_token: Brace,
                                                    fields: [
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: owner,
                                                                    span: bytes(39841..39846),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: person_a,
                                                                                    span: bytes(39848..39856),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: clone,
                                                                    span: bytes(39857..39862),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                        },
                                                        Comma,
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: driver,
                                                                    span: bytes(39878..39884),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::Call {
                                                                attrs: [],
                                                                func: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: Some,
                                                                                    span: bytes(39886..39890),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                paren_token: Paren,
                                                                args: [
                                                                    Expr::MethodCall {
                                                                        attrs: [],
                                                                        receiver: Expr::Path {
                                                                            attrs: [],
                                                                            qself: None,
                                                                            path: Path {
                                                                                leading_colon: None,
                                                                                segments: [
                                                                                    PathSegment {
                                                                                        ident: Ident {
                                                                                            sym: person_b,
                                                                                            span: bytes(39891..39899),
                                                                                        },
                                                                                        arguments: PathArguments::None,
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                        dot_token: Dot,
                                                                        method: Ident {
                                                                            sym: clone,
                                                                            span: bytes(39900..39905),
                                                                        },
                                                                        turbofish: None,
                                                                        paren_token: Paren,
                                                                        args: [],
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        Comma,
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: cost,
                                                                    span: bytes(39922..39926),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::Lit {
                                                                attrs: [],
                                                                lit: Lit::Int {
                                                                    token: 20_000,
                                                                },
                                                            },
                                                        },
                                                        Comma,
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: miles,
                                                                    span: bytes(39948..39953),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::Lit {
                                                                attrs: [],
                                                                lit: Lit::Int {
                                                                    token: 30123,
                                                                },
                                                            },
                                                        },
                                                        Comma,
                                                    ],
                                                    dot2_token: None,
                                                    rest: None,
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: car_b,
                                                span: bytes(39986..39991),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Struct {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: Car,
                                                                    span: bytes(39994..39997),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    brace_token: Brace,
                                                    fields: [
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: owner,
                                                                    span: bytes(40012..40017),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Path {
                                                                    attrs: [],
                                                                    qself: None,
                                                                    path: Path {
                                                                        leading_colon: None,
                                                                        segments: [
                                                                            PathSegment {
                                                                                ident: Ident {
                                                                                    sym: person_b,
                                                                                    span: bytes(40019..40027),
                                                                                },
                                                                                arguments: PathArguments::None,
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: clone,
                                                                    span: bytes(40028..40033),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                        },
                                                        Comma,
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: driver,
                                                                    span: bytes(40049..40055),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: None,
                                                                                span: bytes(40057..40061),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        },
                                                        Comma,
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: cost,
                                                                    span: bytes(40075..40079),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::Lit {
                                                                attrs: [],
                                                                lit: Lit::Int {
                                                                    token: 30_000,
                                                                },
                                                            },
                                                        },
                                                        Comma,
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: miles,
                                                                    span: bytes(40101..40106),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::Lit {
                                                                attrs: [],
                                                                lit: Lit::Int {
                                                                    token: 3780123,
                                                                },
                                                            },
                                                        },
                                                        Comma,
                                                    ],
                                                    dot2_token: None,
                                                    rest: None,
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: value_number,
                                                span: bytes(40141..40153),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Lit {
                                                    attrs: [],
                                                    lit: Lit::Int {
                                                        token: 248169u64,
                                                    },
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: value_string,
                                                span: bytes(40179..40191),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Lit {
                                                        attrs: [],
                                                        lit: Lit::Str {
                                                            token: "This is a test string",
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: to_string,
                                                        span: bytes(40218..40227),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: value_byte,
                                                span: bytes(40243..40253),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Lit {
                                                    attrs: [],
                                                    lit: Lit::Int {
                                                        token: 0x41u8,
                                                    },
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: stored_ref_number,
                                                span: bytes(40277..40294),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: memory,
                                                                        span: bytes(40297..40303),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: push,
                                                        span: bytes(40304..40308),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: value_number,
                                                                            span: bytes(40309..40321),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: stored_ref_car_a,
                                                span: bytes(40336..40352),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: memory,
                                                                        span: bytes(40355..40361),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: push,
                                                        span: bytes(40362..40366),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: car_a,
                                                                                span: bytes(40367..40372),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: clone,
                                                                span: bytes(40373..40378),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [],
                                                        },
                                                    ],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: stored_ref_string,
                                                span: bytes(40395..40412),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: memory,
                                                                        span: bytes(40415..40421),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: push,
                                                        span: bytes(40422..40426),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: value_string,
                                                                                span: bytes(40427..40439),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: clone,
                                                                span: bytes(40440..40445),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [],
                                                        },
                                                    ],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: stored_ref_byte,
                                                span: bytes(40463..40478),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: memory,
                                                                        span: bytes(40481..40487),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: push,
                                                        span: bytes(40488..40492),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::Path {
                                                            attrs: [],
                                                            qself: None,
                                                            path: Path {
                                                                leading_colon: None,
                                                                segments: [
                                                                    PathSegment {
                                                                        ident: Ident {
                                                                            sym: value_byte,
                                                                            span: bytes(40493..40503),
                                                                        },
                                                                        arguments: PathArguments::None,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: stored_ref_car_b,
                                                span: bytes(40518..40534),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: memory,
                                                                        span: bytes(40537..40543),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: push,
                                                        span: bytes(40544..40548),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: car_b,
                                                                                span: bytes(40549..40554),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: clone,
                                                                span: bytes(40555..40560),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [],
                                                        },
                                                    ],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Macro {
                                        attrs: [],
                                        mac: Macro {
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: assert_eq,
                                                            span: bytes(40574..40583),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            bang_token: Not,
                                            delimiter: MacroDelimiter::Paren(
                                                Paren,
                                            ),
                                            tokens: TokenStream [
                                                Punct {
                                                    char: '*',
                                                    spacing: Alone,
                                                    span: bytes(40585..40586),
                                                },
                                                Ident {
                                                    sym: stored_ref_number,
                                                    span: bytes(40586..40603),
                                                },
                                                Punct {
                                                    char: '.',
                                                    spacing: Alone,
                                                    span: bytes(40603..40604),
                                                },
                                                Ident {
                                                    sym: get,
                                                    span: bytes(40604..40607),
                                                },
                                                Group {
                                                    delimiter: Parenthesis,
                                                    stream: TokenStream [],
                                                    span: bytes(40607..40609),
                                                },
                                                Punct {
                                                    char: ',',
                                                    spacing: Alone,
                                                    span: bytes(40609..40610),
                                                },
                                                Ident {
                                                    sym: value_number,
                                                    span: bytes(40611..40623),
                                                },
                                            ],
                                        },
                                        semi_token: Some(
                                            Semi,
                                        ),
                                    },
                                    Stmt::Macro {
                                        attrs: [],
                                        mac: Macro {
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: assert_eq,
                                                            span: bytes(40634..40643),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            bang_token: Not,
                                            delimiter: MacroDelimiter::Paren(
                                                Paren,
                                            ),
                                            tokens: TokenStream [
                                                Punct {
                                                    char: '*',
                                                    spacing: Alone,
                                                    span: bytes(40645..40646),
                                                },
                                                Ident {
                                                    sym: stored_ref_car_a,
                                                    span: bytes(40646..40662),
                                                },
                                                Punct {
                                                    char: '.',
                                                    spacing: Alone,
                                                    span: bytes(40662..40663),
                                                },
                                                Ident {
                                                    sym: get,
                                                    span: bytes(40663..40666),
                                                },
                                                Group {
                                                    delimiter: Parenthesis,
                                                    stream: TokenStream [],
                                                    span: bytes(40666..40668),
                                                },
                                                Punct {
                                                    char: ',',
                                                    spacing: Alone,
                                                    span: bytes(40668..40669),
                                                },
                                                Ident {
                                                    sym: car_a,
                                                    span: bytes(40670..40675),
                                                },
                                            ],
                                        },
                                        semi_token: Some(
                                            Semi,
                                        ),
                                    },
                                    Stmt::Macro {
                                        attrs: [],
                                        mac: Macro {
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: assert_eq,
                                                            span: bytes(40686..40695),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            bang_token: Not,
                                            delimiter: MacroDelimiter::Paren(
                                                Paren,
                                            ),
                                            tokens: TokenStream [
                                                Punct {
                                                    char: '*',
                                                    spacing: Alone,
                                                    span: bytes(40697..40698),
                                                },
                                                Ident {
                                                    sym: stored_ref_string,
                                                    span: bytes(40698..40715),
                                                },
                                                Punct {
                                                    char: '.',
                                                    spacing: Alone,
                                                    span: bytes(40715..40716),
                                                },
                                                Ident {
                                                    sym: get,
                                                    span: bytes(40716..40719),
                                                },
                                                Group {
                                                    delimiter: Parenthesis,
                                                    stream: TokenStream [],
                                                    span: bytes(40719..40721),
                                                },
                                                Punct {
                                                    char: ',',
                                                    spacing: Alone,
                                                    span: bytes(40721..40722),
                                                },
                                                Ident {
                                                    sym: value_string,
                                                    span: bytes(40723..40735),
                                                },
                                            ],
                                        },
                                        semi_token: Some(
                                            Semi,
                                        ),
                                    },
                                    Stmt::Macro {
                                        attrs: [],
                                        mac: Macro {
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: assert_eq,
                                                            span: bytes(40746..40755),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            bang_token: Not,
                                            delimiter: MacroDelimiter::Paren(
                                                Paren,
                                            ),
                                            tokens: TokenStream [
                                                Punct {
                                                    char: '*',
                                                    spacing: Alone,
                                                    span: bytes(40757..40758),
                                                },
                                                Ident {
                                                    sym: stored_ref_car_b,
                                                    span: bytes(40758..40774),
                                                },
                                                Punct {
                                                    char: '.',
                                                    spacing: Alone,
                                                    span: bytes(40774..40775),
                                                },
                                                Ident {
                                                    sym: get,
                                                    span: bytes(40775..40778),
                                                },
                                                Group {
                                                    delimiter: Parenthesis,
                                                    stream: TokenStream [],
                                                    span: bytes(40778..40780),
                                                },
                                                Punct {
                                                    char: ',',
                                                    spacing: Alone,
                                                    span: bytes(40780..40781),
                                                },
                                                Ident {
                                                    sym: car_b,
                                                    span: bytes(40782..40787),
                                                },
                                            ],
                                        },
                                        semi_token: Some(
                                            Semi,
                                        ),
                                    },
                                    Stmt::Macro {
                                        attrs: [],
                                        mac: Macro {
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: assert_eq,
                                                            span: bytes(40798..40807),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            bang_token: Not,
                                            delimiter: MacroDelimiter::Paren(
                                                Paren,
                                            ),
                                            tokens: TokenStream [
                                                Punct {
                                                    char: '*',
                                                    spacing: Alone,
                                                    span: bytes(40809..40810),
                                                },
                                                Ident {
                                                    sym: stored_ref_byte,
                                                    span: bytes(40810..40825),
                                                },
                                                Punct {
                                                    char: '.',
                                                    spacing: Alone,
                                                    span: bytes(40825..40826),
                                                },
                                                Ident {
                                                    sym: get,
                                                    span: bytes(40826..40829),
                                                },
                                                Group {
                                                    delimiter: Parenthesis,
                                                    stream: TokenStream [],
                                                    span: bytes(40829..40831),
                                                },
                                                Punct {
                                                    char: ',',
                                                    spacing: Alone,
                                                    span: bytes(40831..40832),
                                                },
                                                Ident {
                                                    sym: value_byte,
                                                    span: bytes(40833..40843),
                                                },
                                            ],
                                        },
                                        semi_token: Some(
                                            Semi,
                                        ),
                                    },
                                ],
                            },
                        },
                        Item::Fn {
                            attrs: [
                                Attribute {
                                    pound_token: Pound,
                                    style: AttrStyle::Outer,
                                    bracket_token: Bracket,
                                    meta: Meta::Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident {
                                                    sym: test,
                                                    span: bytes(40859..40863),
                                                },
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            ],
                            vis: Visibility::Inherited,
                            sig: Signature {
                                constness: None,
                                asyncness: None,
                                unsafety: None,
                                abi: None,
                                fn_token: Fn,
                                ident: Ident {
                                    sym: add_to_zero_sized,
                                    span: bytes(40872..40889),
                                },
                                generics: Generics {
                                    lt_token: None,
                                    params: [],
                                    gt_token: None,
                                    where_clause: None,
                                },
                                paren_token: Paren,
                                inputs: [],
                                variadic: None,
                                output: ReturnType::Default,
                            },
                            block: Block {
                                brace_token: Brace,
                                stmts: [
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: Some(
                                                Mut,
                                            ),
                                            ident: Ident {
                                                sym: memory,
                                                span: bytes(40910..40916),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Call {
                                                    attrs: [],
                                                    func: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: ContiguousMemory,
                                                                        span: bytes(40919..40935),
                                                                    },
                                                                    arguments: PathArguments::AngleBracketed {
                                                                        colon2_token: Some(
                                                                            PathSep,
                                                                        ),
                                                                        lt_token: Lt,
                                                                        args: [
                                                                            GenericArgument::Type(
                                                                                Type::Path {
                                                                                    qself: None,
                                                                                    path: Path {
                                                                                        leading_colon: None,
                                                                                        segments: [
                                                                                            PathSegment {
                                                                                                ident: Ident {
                                                                                                    sym: ImplDefault,
                                                                                                    span: bytes(40938..40949),
                                                                                                },
                                                                                                arguments: PathArguments::None,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                            ),
                                                                        ],
                                                                        gt_token: Gt,
                                                                    },
                                                                },
                                                                PathSep,
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: new,
                                                                        span: bytes(40952..40955),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    paren_token: Paren,
                                                    args: [],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: person,
                                                span: bytes(40972..40978),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::Struct {
                                                    attrs: [],
                                                    qself: None,
                                                    path: Path {
                                                        leading_colon: None,
                                                        segments: [
                                                            PathSegment {
                                                                ident: Ident {
                                                                    sym: Person,
                                                                    span: bytes(40981..40987),
                                                                },
                                                                arguments: PathArguments::None,
                                                            },
                                                        ],
                                                    },
                                                    brace_token: Brace,
                                                    fields: [
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: name,
                                                                    span: bytes(41002..41006),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Lit {
                                                                    attrs: [],
                                                                    lit: Lit::Str {
                                                                        token: "Jacky",
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: to_string,
                                                                    span: bytes(41016..41025),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                        },
                                                        Comma,
                                                        FieldValue {
                                                            attrs: [],
                                                            member: Member::Named(
                                                                Ident {
                                                                    sym: last_name,
                                                                    span: bytes(41041..41050),
                                                                },
                                                            ),
                                                            colon_token: Some(
                                                                Colon,
                                                            ),
                                                            expr: Expr::MethodCall {
                                                                attrs: [],
                                                                receiver: Expr::Lit {
                                                                    attrs: [],
                                                                    lit: Lit::Str {
                                                                        token: "Larsson",
                                                                    },
                                                                },
                                                                dot_token: Dot,
                                                                method: Ident {
                                                                    sym: to_string,
                                                                    span: bytes(41062..41071),
                                                                },
                                                                turbofish: None,
                                                                paren_token: Paren,
                                                                args: [],
                                                            },
                                                        },
                                                        Comma,
                                                    ],
                                                    dot2_token: None,
                                                    rest: None,
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Local {
                                        attrs: [],
                                        let_token: Let,
                                        pat: Pat::Ident {
                                            attrs: [],
                                            by_ref: None,
                                            mutability: None,
                                            ident: Ident {
                                                sym: stored_person,
                                                span: bytes(41099..41112),
                                            },
                                            subpat: None,
                                        },
                                        init: Some(
                                            LocalInit {
                                                eq_token: Eq,
                                                expr: Expr::MethodCall {
                                                    attrs: [],
                                                    receiver: Expr::Path {
                                                        attrs: [],
                                                        qself: None,
                                                        path: Path {
                                                            leading_colon: None,
                                                            segments: [
                                                                PathSegment {
                                                                    ident: Ident {
                                                                        sym: memory,
                                                                        span: bytes(41115..41121),
                                                                    },
                                                                    arguments: PathArguments::None,
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    dot_token: Dot,
                                                    method: Ident {
                                                        sym: push,
                                                        span: bytes(41122..41126),
                                                    },
                                                    turbofish: None,
                                                    paren_token: Paren,
                                                    args: [
                                                        Expr::MethodCall {
                                                            attrs: [],
                                                            receiver: Expr::Path {
                                                                attrs: [],
                                                                qself: None,
                                                                path: Path {
                                                                    leading_colon: None,
                                                                    segments: [
                                                                        PathSegment {
                                                                            ident: Ident {
                                                                                sym: person,
                                                                                span: bytes(41127..41133),
                                                                            },
                                                                            arguments: PathArguments::None,
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                            dot_token: Dot,
                                                            method: Ident {
                                                                sym: clone,
                                                                span: bytes(41134..41139),
                                                            },
                                                            turbofish: None,
                                                            paren_token: Paren,
                                                            args: [],
                                                        },
                                                    ],
                                                },
                                                diverge: None,
                                            },
                                        ),
                                        semi_token: Semi,
                                    },
                                    Stmt::Macro {
                                        attrs: [],
                                        mac: Macro {
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: assert_eq,
                                                            span: bytes(41153..41162),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            bang_token: Not,
                                            delimiter: MacroDelimiter::Paren(
                                                Paren,
                                            ),
                                            tokens: TokenStream [
                                                Ident {
                                                    sym: memory,
                                                    span: bytes(41164..41170),
                                                },
                                                Punct {
                                                    char: '.',
                                                    spacing: Alone,
                                                    span: bytes(41170..41171),
                                                },
                                                Ident {
                                                    sym: capacity,
                                                    span: bytes(41171..41179),
                                                },
                                                Group {
                                                    delimiter: Parenthesis,
                                                    stream: TokenStream [],
                                                    span: bytes(41179..41181),
                                                },
                                                Punct {
                                                    char: ',',
                                                    spacing: Alone,
                                                    span: bytes(41181..41182),
                                                },
                                                Literal {
                                                    lit: 48,
                                                    span: bytes(41183..41185),
                                                },
                                            ],
                                        },
                                        semi_token: Some(
                                            Semi,
                                        ),
                                    },
                                    Stmt::Macro {
                                        attrs: [],
                                        mac: Macro {
                                            path: Path {
                                                leading_colon: None,
                                                segments: [
                                                    PathSegment {
                                                        ident: Ident {
                                                            sym: assert_eq,
                                                            span: bytes(41196..41205),
                                                        },
                                                        arguments: PathArguments::None,
                                                    },
                                                ],
                                            },
                                            bang_token: Not,
                                            delimiter: MacroDelimiter::Paren(
                                                Paren,
                                            ),
                                            tokens: TokenStream [
                                                Punct {
                                                    char: '*',
                                                    spacing: Alone,
                                                    span: bytes(41207..41208),
                                                },
                                                Ident {
                                                    sym: stored_person,
                                                    span: bytes(41208..41221),
                                                },
                                                Punct {
                                                    char: '.',
                                                    spacing: Alone,
                                                    span: bytes(41221..41222),
                                                },
                                                Ident {
                                                    sym: get,
                                                    span: bytes(41222..41225),
                                                },
                                                Group {
                                                    delimiter: Parenthesis,
                                                    stream: TokenStream [],
                                                    span: bytes(41225..41227),
                                                },
                                                Punct {
                                                    char: ',',
                                                    spacing: Alone,
                                                    span: bytes(41227..41228),
                                                },
                                                Ident {
                                                    sym: person,
                                                    span: bytes(41229..41235),
                                                },
                                            ],
                                        },
                                        semi_token: Some(
                                            Semi,
                                        ),
                                    },
                                ],
                            },
                        },
                    ],
                ),
            ),
            semi: None,
        },
    ],
}
